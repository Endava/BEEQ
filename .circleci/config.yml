# Use the latest 2.1 version of CircleCI pipeline process engine
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  nx: nrwl/nx@1.7.0

# ---------------------------------------------------------------------------- #
#              Sequence of steps as a map to be executed in a job              #
# ---------------------------------------------------------------------------- #
commands:
  setup-node:
    description: Install volta & ensure consistent node and pnpm versions are installed
    steps:
      - run:
          name: üõ† Setup Volta
          command: |
            export VOLTA_FEATURE_PNPM=1
            curl https://get.volta.sh | bash
            echo 'export VOLTA_FEATURE_PNPM=1' >> $BASH_ENV
            echo 'export VOLTA_HOME=$HOME/.volta' >> $BASH_ENV
            echo 'export PATH=$VOLTA_HOME:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: üîé Check Node and NPM versions
          command: |
            $HOME/.volta/bin/node --version
            $HOME/.volta/bin/pnpm --version
  chromatic-deployment:
    description: Publish changes to Chromatic storybook
    steps:
      - run:
          name: üöÄ Publish to Chromatic
          command: pnpm exec chromatic --project-token=${CHROMATIC_PROJECT_TOKEN} --ci --debug --no-file-hashing

# ---------------------------------------------------------------------------- #
#                         Jobs are collections of steps                        #
# ---------------------------------------------------------------------------- #
jobs:
  build-and-test:
    # You can specify an image from DockerHub or use one of our Convenience/Machine Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Machine Images are available here: https://circleci.com/developer/images?imageType=machine
    machine:
      image: ubuntu-2404:2024.11.1
    resource_class: medium
    # parallelism: 4
    environment:
      NX_BRANCH: << pipeline.git.branch >>
    # Then run your node commands!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      - setup-node
      - run:
          name: ‚ñ∂Ô∏è Start Nx Cloud Agents
          command: pnpm dlx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --with-env-vars="NX_VERBOSE_LOGGING"
      - restore_cache:
          name: üí´ Restore PNPM dependencies
          # CircleCI will first try to load a cache associated with the current version of pnpm-lock.yaml.
          # If the lock file has changed due to a dependency being added, then no cache will be found.
          # Next, it will use the static fallback key pnpm-deps-v1-{{ .Branch }}- to load the most recent valid cache
          # with the pnpm-deps-v1-{{ .Branch }}- prefix.
          keys:
            - pnpm-deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{checksum "pnpm-lock.yaml"}}
            - pnpm-deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-
      - run:
          name: üì¶ Install dependencies
          #  In this case, only those dependencies that are not in the cache will be installed.
          command: pnpm install --frozen-lockfile
      - save_cache:
          name: üíæ Save PNPM dependencies
          # After all of the project's dependencies have been loaded,
          # the save_cache step will save the updated dependency tree to a new cache in the node_modules directory.
          key: pnpm-deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{checksum "pnpm-lock.yaml"}}
          paths:
            - node_modules
            - ~/.pnpm-store
      - nx/set-shas
          # Derives SHAs for base and head for use in `nx affected` commands in CI
      - run:
          name: üßæ NX report
          command: pnpm exec nx report
      - run:
          name: ü©∫ Run Linters
          command: pnpm exec nx affected -t lint --exclude='*,!tag:publishable' --parallel=4 --output-style=stream --base=$NX_BASE --head=$NX_HEAD --verbose
      - run:
          name: üß∞ Run Unit Tests
          command: pnpm exec nx affected -t test --exclude='*,!tag:core' --parallel=4 --output-style=stream --ci --base=$NX_BASE --head=$NX_HEAD --verbose
      - run:
          name: ‚è≥ Build Libraries
          command: pnpm exec nx affected -t build --exclude='*,!tag:publishable' --parallel=4 --output-style=stream --base=$NX_BASE --head=$NX_HEAD --verbose
      - run:
          name: üß™ Run E2E Tests
          command: pnpm exec nx affected -t e2e --exclude='*,!tag:core' --parallel=4 --ci --code-coverage --output-style=stream --base=$NX_BASE --head=$NX_HEAD --verbose
      - run:
          name: üìö Build Storybook
          command: pnpm exec nx run beeq:storybook-build --parallel --output-style=stream --verbose
      - run:
          name: ‚èπÔ∏è Stop Nx Cloud Agents
          command: pnpm dlx nx-cloud stop-all-agents
      - chromatic-deployment

# ---------------------------------------------------------------------------- #
#                         Used for orchestrate all jobs                        #
# ---------------------------------------------------------------------------- #
workflows:
  ‚è≥ Build and Test:
    jobs:
      - build-and-test
