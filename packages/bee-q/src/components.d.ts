/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TAvatarShape, TAvatarSize } from "./components/avatar/bq-avatar.types";
import { TBadgeSize } from "./components/badge/bq-badge.types";
import { TButtonAppearance, TButtonSize, TButtonType, TButtonVariant } from "./components/button/bq-button.types";
import { TDialogFooterAppearance, TDialogSize } from "./components/dialog/bq-dialog.types";
import { TDividerOrientation, TDividerStrokeLinecap, TDividerTitleAlignment } from "./components/divider/bq-divider.types";
import { TIconWeight } from "./components/icon/bq-icon.types";
import { TInputType, TInputValidation, TInputValue } from "./components/input/bq-input.types";
import { TNotificationType } from "./components/notification/bq-notification.types";
import { TRadioGroupOrientation } from "./components/radio-group/bq-radio-group.types";
import { TSideMenuAppearance, TSideMenuSize } from "./components/side-menu/bq-side-menu.types";
import { TSliderType } from "./components/slider/bq-slider.types";
import { TSpinnerSize, TSpinnerTextPosition } from "./components/spinner/bq-spinner.types";
import { TStatusType } from "./components/status/bq-status.types";
import { TSwitchInnerLabel, TSwitchJustifyContent } from "./components/switch/bq-swithc.types";
import { TTabSize } from "./components/tab/bq-tab.types";
import { TToastPlacement, TToastType } from "./components/toast/bq-toast.types";
import { FloatingUIPlacement } from "./services/interfaces";
export { TAvatarShape, TAvatarSize } from "./components/avatar/bq-avatar.types";
export { TBadgeSize } from "./components/badge/bq-badge.types";
export { TButtonAppearance, TButtonSize, TButtonType, TButtonVariant } from "./components/button/bq-button.types";
export { TDialogFooterAppearance, TDialogSize } from "./components/dialog/bq-dialog.types";
export { TDividerOrientation, TDividerStrokeLinecap, TDividerTitleAlignment } from "./components/divider/bq-divider.types";
export { TIconWeight } from "./components/icon/bq-icon.types";
export { TInputType, TInputValidation, TInputValue } from "./components/input/bq-input.types";
export { TNotificationType } from "./components/notification/bq-notification.types";
export { TRadioGroupOrientation } from "./components/radio-group/bq-radio-group.types";
export { TSideMenuAppearance, TSideMenuSize } from "./components/side-menu/bq-side-menu.types";
export { TSliderType } from "./components/slider/bq-slider.types";
export { TSpinnerSize, TSpinnerTextPosition } from "./components/spinner/bq-spinner.types";
export { TStatusType } from "./components/status/bq-status.types";
export { TSwitchInnerLabel, TSwitchJustifyContent } from "./components/switch/bq-swithc.types";
export { TTabSize } from "./components/tab/bq-tab.types";
export { TToastPlacement, TToastType } from "./components/toast/bq-toast.types";
export { FloatingUIPlacement } from "./services/interfaces";
export namespace Components {
    /**
     * An avatar represents an object made of different pieces of information, in a way that is understandable at a glance.
     */
    interface BqAvatar {
        /**
          * Alternate text for the avatar image if the image cannot be displayed
         */
        "altText": string;
        /**
          * The image source to load on the avatar (this can be also a base64 encoded image)
         */
        "image": string;
        /**
          * The text to display on avatar
         */
        "initials": string;
        /**
          * A text to use for describing the avatar on assistive devices
         */
        "label": string;
        /**
          * The shape of the avatar
         */
        "shape": TAvatarShape;
        /**
          * The size of the avatar
         */
        "size": TAvatarSize;
    }
    interface BqBadge {
        /**
          * Badge background color. The value should be a valid value of the palette color
         */
        "backgroundColor"?: string;
        /**
          * The size of the badge. Relevant if badge has no content.
         */
        "size"?: TBadgeSize;
        /**
          * Badge number color. The value should be a valid value of the palette color
         */
        "textColor"?: string;
    }
    interface BqBreadcrumb {
        /**
          * The `aria-label` attribute to describe the type of navigation
         */
        "ariaLabel": string;
    }
    interface BqBreadcrumbItem {
        /**
          * The aria-label that corresponds to the full title of the destination page. This won't be shown in the page, but it will be used by screen readers and other assistive devices.
         */
        "ariaLabel": string;
        /**
          * If set, the breadcrumb item will be rendered as an `<a>` with this `href`, otherwise, a `<button>` will be rendered.
         */
        "href": string;
        /**
          * If true, the item is the last element inside breadcrumb
         */
        "isLastItem": boolean;
        /**
          * Where to display the link in the browser context. Relevant only if `href` is set.
         */
        "rel": string;
        /**
          * Where to display the link in the browser context. Relevant only if `href` is set.
         */
        "target": '_blank' | '_parent' | '_self' | '_top';
    }
    /**
     * Buttons are designed for users to take action on a page or a screen.
     */
    interface BqButton {
        /**
          * The appearance style to apply to the button
         */
        "appearance": TButtonAppearance;
        /**
          * If `true`, it will make the button fit to its parent width.
         */
        "block": boolean;
        /**
          * If true, the button will be disabled (no interaction allowed)
         */
        "disabled": boolean;
        /**
          * Tells the browser to treat the linked URL as a download. Only used when `href` is set. Details: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download
         */
        "download"?: string;
        /**
          * When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`
         */
        "href": string;
        /**
          * It determinate how the content should be aligned
         */
        "justifyContent": 'left' | 'center' | 'right';
        /**
          * If `true` it will display the button in a loading state
         */
        "loading": boolean;
        /**
          * The size of the button
         */
        "size": TButtonSize;
        /**
          * Where to display the linked URL, as the name for a browsing context (a `tab`, `window`, or `<iframe>`) Details: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target
         */
        "target": '_blank' | '_parent' | '_self' | '_top';
        /**
          * The default behavior of the button
         */
        "type": TButtonType;
        /**
          * The variant of button to apply on top of the appearance (applicable only to `appearance="primary"`)
         */
        "variant": TButtonVariant;
    }
    interface BqCheckbox {
        /**
          * If true checkbox displays background on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * If true checkbox is checked
         */
        "checked"?: boolean;
        /**
          * If true checkbox is disabled
         */
        "disabled"?: boolean;
        /**
          * The form ID that the checkbox is associated with
         */
        "formId"?: string;
        /**
          * A state that is neither checked nor unchecked
         */
        "indeterminate": false;
        /**
          * Name of the HTML input form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * If `true`, it will indicate that the user must specify a value for the checkbox before the owning form can be submitted
         */
        "required"?: boolean;
        /**
          * Remove focus from the native `<input>` HTML element used under the hood. Use this method instead of the global `element.blur()`.
         */
        "vBlur": () => Promise<void>;
        /**
          * Simulate a click event on the native `<input>` HTML element used under the hood. Use this method instead of the global `element.click()`.
         */
        "vClick": () => Promise<void>;
        /**
          * Sets focus on the native `<input>` HTML element used under the hood. Use this method instead of the global `element.focus()`.
         */
        "vFocus": () => Promise<void>;
        /**
          * A string representing the value of the checkbox. Primarily used to differentiate a list of related checkboxes that have the same name.
         */
        "value": string;
    }
    interface BqDialog {
        /**
          * Dismiss or cancel the dialog
         */
        "cancel": () => Promise<void>;
        /**
          * If true, the backdrop overlay won't be shown when the dialog opens
         */
        "disableBackdrop": boolean;
        /**
          * If true, the dialog will not close when clicking on the backdrop overlay
         */
        "disableCloseClickOutside": boolean;
        /**
          * If true, the dialog will not close when the [Esc] key is press
         */
        "disableCloseEscKeydown": boolean;
        /**
          * The appearance of footer
         */
        "footerApperance": TDialogFooterAppearance;
        /**
          * Closes the dialog
         */
        "hide": () => Promise<void>;
        /**
          * If true, it hides the close button
         */
        "hideCloseButton": boolean;
        /**
          * If true, the dialog will be shown as open
         */
        "open": boolean;
        /**
          * Open the dialog
         */
        "show": () => Promise<void>;
        /**
          * The size of the dialog
         */
        "size": TDialogSize;
    }
    interface BqDivider {
        /**
          * If true, the divider has a dashed pattern
         */
        "dashed": boolean;
        /**
          * The default orientation of the divider
         */
        "orientation": TDividerOrientation;
        /**
          * Set the min width of the divider's stroke when text is not centered. Value expressed in px
         */
        "strokeBasis"?: number;
        /**
          * Set the stroke color of the divider. The value should be a valid value of the palette color
         */
        "strokeColor"?: string;
        /**
          * Set the gap of the divider's stroke. This is applicable when the stroke is dashed
         */
        "strokeDashGap"?: number;
        /**
          * Set the width of each dash of the divider's stroke. This is applicable when the stroke is dashed
         */
        "strokeDashWidth"?: number;
        /**
          * Set the lineap of the divider's stroke. This is applicable when the stroke is dashed
         */
        "strokeLinecap"?: TDividerStrokeLinecap;
        /**
          * Set the thickness of the divider's stroke. Value expressed in px
         */
        "strokeThickness"?: number;
        /**
          * Set the alignment of the title on the main axis of the divider (horizontal / vertical)
         */
        "titleAlignment"?: TDividerTitleAlignment;
    }
    /**
     * Icons are simplified images that graphically explain the meaning of an object on the screen.
     */
    interface BqIcon {
        /**
          * Set the stroke color of the SVG. The value should be a valid value of the palette color
         */
        "color"?: string;
        /**
          * Icon name to load. Please check all available icons [here](https://phosphoricons.com/)
         */
        "name": string;
        /**
          * Set the size of the SVG
         */
        "size"?: string | number;
        /**
          * It set the icon weight/style
         */
        "weight"?: TIconWeight;
    }
    interface BqInput {
        /**
          * Controls whether or not the input field should be capitalized and how. Possible values are 'off', 'none', 'on', 'sentences', 'words', and 'characters'. See: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
         */
        "autocapitalize": string;
        /**
          * Specifies whether or not the input field should have autocomplete enabled. See: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values
         */
        "autocomplete": string;
        /**
          * Controls whether or not the input field should have autocorrect enabled. Possible values are 'on' and 'off'.
         */
        "autocorrect": 'on' | 'off';
        /**
          * If true, the input will be focused on component render
         */
        "autofocus": boolean;
        /**
          * The clear button aria label
         */
        "clearButtonLabel"?: string;
        /**
          * The amount of time, in milliseconds, to wait before emitting the `bqInput` event after the input value changes. A value of 0 means no debouncing will occur.
         */
        "debounceTime"?: number;
        /**
          * If true, the clear button won't be displayed
         */
        "disableClear"?: boolean;
        /**
          * Indicates whether the input is disabled or not. If `true`, the input is disabled and cannot be interacted with.
         */
        "disabled"?: boolean;
        /**
          * The ID of the form that the input field belongs to.
         */
        "form"?: string;
        /**
          * The inputmode attribute specifies what kind of input mechanism would be most helpful for users entering content into the input field. This allows a browser to display an appropriate virtual keyboard while editing. Possible values are 'none', 'text', 'decimal', 'numeric', 'tel', 'search', 'email', 'url', and 'date'.
         */
        "inputmode"?: string;
        /**
          * The maximum value that the input field can accept. Only applies to date and number input types.
         */
        "max"?: number | string;
        /**
          * The maximum number of characters that the input field can accept.
         */
        "maxlength": number;
        /**
          * The minimum value that the input field can accept. Only applies to date and number input types.
         */
        "min"?: number | string;
        /**
          * The minimum number of characters that the input field can accept.
         */
        "minlength": number;
        /**
          * The input field name.
         */
        "name": string;
        /**
          * Specifies a regular expression the form control's value should match. See: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern
         */
        "pattern"?: string;
        /**
          * The input placeholder text value
         */
        "placeholder"?: string;
        /**
          * If true, the input field cannot be modified.
         */
        "readonly"?: boolean;
        /**
          * Indicates whether or not the input field is required to be filled out before submitting the form.
         */
        "required"?: boolean;
        /**
          * A number that specifies the granularity that the value must adhere to. Valid for date, month, week, time, datetime-local, number, and range. See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step
         */
        "step": number | 'any';
        /**
          * The type attribute specifies the type of input field to display. Possible values are 'text', 'password', 'email', 'number', 'tel', 'search', 'url', and more. See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types
         */
        "type": TInputType;
        /**
          * The validation status of the input.
          * @remarks This property is used to indicate the validation status of the input. It can be set to one of the following values: - `'none'`: No validation status is set. - `'error'`: The input has a validation error. - `'warning'`: The input has a validation warning. - `'success'`: The input has passed validation.
         */
        "validationStatus": TInputValidation;
        /**
          * The input value, it can be used to reset the input to a previous value
         */
        "value": TInputValue;
    }
    interface BqNotification {
        /**
          * If true, the notification will automatically hide after the specified amount of time
         */
        "autoDismiss": boolean;
        /**
          * If true, the close button at the top right of the notification won't be shown
         */
        "disableClose": boolean;
        /**
          * Method to be called to hide the notification component
         */
        "hide": () => Promise<void>;
        /**
          * If true, the notification icon won't be shown
         */
        "hideIcon": boolean;
        /**
          * If true, the notification will be shown
         */
        "open": boolean;
        /**
          * Method to be called to show the notification component
         */
        "show": () => Promise<void>;
        /**
          * The length of time, in milliseconds, after which the notification will close itself. Only valid if `autoDismiss="true"`
         */
        "time": number;
        /**
          * This method can be used to display notifications in a fixed-position element that allows for stacking multiple notifications vertically
         */
        "toast": () => Promise<void>;
        /**
          * Type of Notification
         */
        "type": TNotificationType;
    }
    interface BqOption {
        /**
          * If true, the option is disabled.
         */
        "disabled"?: boolean;
        /**
          * If true, the option is selected and active.
         */
        "selected": boolean;
        /**
          * A string representing the value of the option. Can be used to identify the item
         */
        "value"?: string;
    }
    interface BqOptionGroup {
    }
    interface BqOptionList {
        /**
          * If true, the option is selected and active.
         */
        "ariaLabel": string;
    }
    interface BqRadio {
        /**
          * If true radio displays background on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * If true radio input is checked
         */
        "checked"?: boolean;
        /**
          * If true radio input is disabled
         */
        "disabled"?: boolean;
        /**
          * The form ID that the radio input is associated with
         */
        "formId"?: string;
        /**
          * Name of the HTML input form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * If `true`, it will indicate that the user must specify a value for the radio before the owning form can be submitted
         */
        "required"?: boolean;
        /**
          * Remove focus from the native `<input>` HTML element used under the hood. Use this method instead of the global `element.blur()`.
         */
        "vBlur": () => Promise<void>;
        /**
          * Simulate a click event on the native `<input>` HTML element used under the hood. Use this method instead of the global `element.click()`.
         */
        "vClick": () => Promise<void>;
        /**
          * Sets focus on the native `<input>` HTML element used under the hood. Use this method instead of the global `element.focus()`.
         */
        "vFocus": () => Promise<void>;
        /**
          * A string representing the value of the radio.
         */
        "value": string;
    }
    interface BqRadioGroup {
        /**
          * If true, all radio inputs in the group will display a background on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * A number representing the delay time (in milliseconds) that `bqChange` event handler gets triggered once the value change
         */
        "debounceTime": number;
        /**
          * If true radio inputs are disabled
         */
        "disabled"?: boolean;
        /**
          * If true displays fieldset
         */
        "fieldset"?: boolean;
        /**
          * Name of the HTML input form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * The display orientation of the radio inputs
         */
        "orientation": TRadioGroupOrientation;
        /**
          * A string representing the value of the radio.
         */
        "value"?: string;
    }
    interface BqSideMenu {
        /**
          * It sets a predefined appearance of the side menu
         */
        "appearance": TSideMenuAppearance;
        /**
          * If true, the container will reduce its width
         */
        "collapse": boolean;
        /**
          * It sets the size of the navigation menu items
         */
        "size": TSideMenuSize;
        /**
          * Toggle the collapse state of the side menu
         */
        "toggleCollapse": () => Promise<void>;
    }
    interface BqSideMenuItem {
        /**
          * If true, the menu item will be shown as active/selected.
         */
        "active": boolean;
        /**
          * If true, the item label and suffix will be hidden and the with will be reduce according to its parent
         */
        "collapse": boolean;
        /**
          * If true, the menu item will be disabled (no interaction allowed)
         */
        "disabled": boolean;
    }
    interface BqSlider {
        /**
          * A number representing the delay value applied to bqChange event handler
         */
        "debounceTime": number;
        /**
          * If `true` slider is disabled
         */
        "disabled"?: boolean;
        /**
          * A number representing the minimum value between the min and max range selected.
         */
        "gap": number;
        /**
          * A number representing the max value of the slider.
         */
        "max": number;
        /**
          * A number representing the min value of the slider.
         */
        "min": number;
        /**
          * A number representing the step of the slider.
         */
        "step": number;
        /**
          * It defines the type of slider to display
         */
        "type": TSliderType;
        /**
          * A number representing the value of the slider.
         */
        "value": number | Array<number> | string;
        /**
          * If `true` it will display the min and max values
         */
        "valueIndicator"?: boolean;
    }
    /**
     * Spinners are designed for users to display data loading.
     */
    interface BqSpinner {
        /**
          * If `false`, the animation on the icon element will be stopped
         */
        "animation"?: boolean;
        /**
          * It defines the size of the icon element displayed
         */
        "size": TSpinnerSize;
        /**
          * It defines the position of the label text
         */
        "textPosition": TSpinnerTextPosition;
    }
    interface BqStatus {
        /**
          * It defines the type of status to display
         */
        "type": TStatusType;
    }
    /**
     * Toggle switches are digital on/off switches.
     * They should provide immediate results, giving users the freedom to control their preferences as needed.
     */
    interface BqSwitch {
        /**
          * If true, a background will be displayed on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * It indicates whether if the switch is `ON` by default (when the page loads)
         */
        "checked"?: boolean;
        /**
          * If true, the switch control will be disabled and no interaction will be allowed
         */
        "disabled"?: boolean;
        /**
          * If true, the component will take the full width space available on the parent container
         */
        "fullWidth"?: boolean;
        /**
          * It indicates how to to display the on/off marks inside the control, with icons or none (default)
         */
        "innerLabel"?: TSwitchInnerLabel;
        /**
          * It defines how to distribute the space between and around the control and the label text (https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)
         */
        "justifyContent"?: TSwitchJustifyContent;
        /**
          * Name of the form control. Submitted with the form as part of a name/value pair
         */
        "name": string;
        /**
          * If `true`, it will indicate that the user must switch `ON` the element before the owning form can be submitted
         */
        "required"?: boolean;
        /**
          * If true, the order of the control and the label text will be changed
         */
        "reverseOrder"?: boolean;
        /**
          * Remove focus from the native `<input>` HTML element used under the hood. Use this method instead of the global `element.blur()`.
         */
        "vBlur": () => Promise<void>;
        /**
          * Simulate a click event on the native `<input>` HTML element used under the hood. Use this method instead of the global `element.click()`.
         */
        "vClick": () => Promise<void>;
        /**
          * Sets focus on the native `<input>` HTML element used under the hood. Use this method instead of the global `element.focus()`.
         */
        "vFocus": () => Promise<void>;
        /**
          * The input control's value, submitted as a name/value pair with form data.
         */
        "value"?: string;
    }
    interface BqTab {
        /**
          * If true tab is active
         */
        "active"?: boolean;
        /**
          * The tab panel id that the tab controls
         */
        "controls": string;
        /**
          * If true tab is disabled
         */
        "disabled": boolean;
        /**
          * Sets tabindex on the native `<button>` HTML element used under the hood. This method is used inside `<bq-tab-group>` to make tab focusable after the active one is focused
         */
        "enableFocus": (value: boolean) => Promise<void>;
        /**
          * The size of the tab
         */
        "size": TTabSize;
        /**
          * The id of the tab
         */
        "tabId": string;
        /**
          * Remove focus from the native `<button>` HTML element used under the hood. Use this method instead of the global `element.blur()`.
         */
        "vBlur": () => Promise<void>;
        /**
          * Simulate a click event on the native `<button>` HTML element used under the hood. Use this method instead of the global `element.click()`.
         */
        "vClick": () => Promise<void>;
        /**
          * Sets focus on the native `<button>` HTML element used under the hood. Use this method instead of the global `element.focus()`.
         */
        "vFocus": () => Promise<void>;
    }
    interface BqTabGroup {
        /**
          * A number representing the delay value applied to bqChange event handler
         */
        "debounceTime": number;
        /**
          * If true, the underline divider below the tabs won't be shown
         */
        "disableDivider": boolean;
        /**
          * The size of the tab
         */
        "size": TTabSize;
        /**
          * A string representing the id of the selected tab.
         */
        "value": string;
    }
    interface BqTextarea {
        /**
          * If `true`, the textarea will automatically grow and shrink to fit its contents. If `false`, the textarea will have a fixed height specified by the `rows` property.
         */
        "autoGrow": boolean;
        /**
          * The amount of time, in milliseconds, to wait before emitting the `bqInput` event after the textarea value changes. A value of 0 means no debouncing will occur.
         */
        "debounceTime"?: number;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled": boolean;
        /**
          * The maximum number of characters that can be entered into the textarea (`0`: no limit). When enabled, a character counter will be shown underneath the textarea.
         */
        "maxlength": number;
        /**
          * The name of the textarea element.
         */
        "name": string;
        /**
          * The placeholder text to show when there is no value.
         */
        "placeholder": string;
        /**
          * The number of visible text lines for the control. It must be a positive integer.
         */
        "rows": number;
        /**
          * The validation status of the input.
          * @remarks This property is used to indicate the validation status of the input. It can be set to one of the following values: - `'none'`: No validation status is set. - `'error'`: The input has a validation error. - `'warning'`: The input has a validation warning. - `'success'`: The input has passed validation.
         */
        "validationStatus": TInputValidation;
        /**
          * The value of the textarea. It can be used to reset the input to a previous value.
         */
        "value": string;
    }
    interface BqToast {
        /**
          * Method to be called to hide the toast component
         */
        "hide": () => Promise<void>;
        /**
          * If true will hide toast icon
         */
        "hideIcon": boolean;
        /**
          * If true, the toast will be shown
         */
        "open": boolean;
        /**
          * Placement of toast
         */
        "placement": TToastPlacement;
        /**
          * Method to be called to show the toast component
         */
        "show": () => Promise<void>;
        /**
          * The length of time, in milliseconds, after which the toast will close itself
         */
        "time": number;
        /**
          * This method can be used to display toasts in a fixed-position element that allows for stacking multiple toasts vertically
         */
        "toast": () => Promise<void>;
        /**
          * Type of toast
         */
        "type": TToastType;
    }
    interface BqTooltip {
        /**
          * Set the action when the tooltip should be displayed, on hover (default) or click
         */
        "displayOn": 'click' | 'hover';
        /**
          * Distance between trigger element and tooltip
         */
        "distance"?: number;
        /**
          * Hides the tooltip
         */
        "hide": () => Promise<void>;
        /**
          * If true, the arrow on the tooltip content won't be shown
         */
        "hideArrow"?: boolean;
        "placement"?: FloatingUIPlacement;
        /**
          * Whether the tooltip should have the same width as the trigger element (applicable only for content shorter than the trigger element)
         */
        "sameWidth"?: boolean;
        /**
          * Shows the tooltip
         */
        "show": () => Promise<void>;
        /**
          * Indicates whether or not the tooltip is visible
         */
        "visible"?: boolean;
    }
}
export interface BqBreadcrumbCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqBreadcrumbElement;
}
export interface BqBreadcrumbItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqBreadcrumbItemElement;
}
export interface BqButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqButtonElement;
}
export interface BqCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqCheckboxElement;
}
export interface BqDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqDialogElement;
}
export interface BqIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqIconElement;
}
export interface BqInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqInputElement;
}
export interface BqNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqNotificationElement;
}
export interface BqOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqOptionElement;
}
export interface BqOptionListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqOptionListElement;
}
export interface BqRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqRadioElement;
}
export interface BqRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqRadioGroupElement;
}
export interface BqSideMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqSideMenuElement;
}
export interface BqSideMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqSideMenuItemElement;
}
export interface BqSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqSliderElement;
}
export interface BqSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqSwitchElement;
}
export interface BqTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqTabElement;
}
export interface BqTabGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqTabGroupElement;
}
export interface BqTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqTextareaElement;
}
export interface BqToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqToastElement;
}
declare global {
    /**
     * An avatar represents an object made of different pieces of information, in a way that is understandable at a glance.
     */
    interface HTMLBqAvatarElement extends Components.BqAvatar, HTMLStencilElement {
    }
    var HTMLBqAvatarElement: {
        prototype: HTMLBqAvatarElement;
        new (): HTMLBqAvatarElement;
    };
    interface HTMLBqBadgeElement extends Components.BqBadge, HTMLStencilElement {
    }
    var HTMLBqBadgeElement: {
        prototype: HTMLBqBadgeElement;
        new (): HTMLBqBadgeElement;
    };
    interface HTMLBqBreadcrumbElement extends Components.BqBreadcrumb, HTMLStencilElement {
    }
    var HTMLBqBreadcrumbElement: {
        prototype: HTMLBqBreadcrumbElement;
        new (): HTMLBqBreadcrumbElement;
    };
    interface HTMLBqBreadcrumbItemElement extends Components.BqBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLBqBreadcrumbItemElement: {
        prototype: HTMLBqBreadcrumbItemElement;
        new (): HTMLBqBreadcrumbItemElement;
    };
    /**
     * Buttons are designed for users to take action on a page or a screen.
     */
    interface HTMLBqButtonElement extends Components.BqButton, HTMLStencilElement {
    }
    var HTMLBqButtonElement: {
        prototype: HTMLBqButtonElement;
        new (): HTMLBqButtonElement;
    };
    interface HTMLBqCheckboxElement extends Components.BqCheckbox, HTMLStencilElement {
    }
    var HTMLBqCheckboxElement: {
        prototype: HTMLBqCheckboxElement;
        new (): HTMLBqCheckboxElement;
    };
    interface HTMLBqDialogElement extends Components.BqDialog, HTMLStencilElement {
    }
    var HTMLBqDialogElement: {
        prototype: HTMLBqDialogElement;
        new (): HTMLBqDialogElement;
    };
    interface HTMLBqDividerElement extends Components.BqDivider, HTMLStencilElement {
    }
    var HTMLBqDividerElement: {
        prototype: HTMLBqDividerElement;
        new (): HTMLBqDividerElement;
    };
    /**
     * Icons are simplified images that graphically explain the meaning of an object on the screen.
     */
    interface HTMLBqIconElement extends Components.BqIcon, HTMLStencilElement {
    }
    var HTMLBqIconElement: {
        prototype: HTMLBqIconElement;
        new (): HTMLBqIconElement;
    };
    interface HTMLBqInputElement extends Components.BqInput, HTMLStencilElement {
    }
    var HTMLBqInputElement: {
        prototype: HTMLBqInputElement;
        new (): HTMLBqInputElement;
    };
    interface HTMLBqNotificationElement extends Components.BqNotification, HTMLStencilElement {
    }
    var HTMLBqNotificationElement: {
        prototype: HTMLBqNotificationElement;
        new (): HTMLBqNotificationElement;
    };
    interface HTMLBqOptionElement extends Components.BqOption, HTMLStencilElement {
    }
    var HTMLBqOptionElement: {
        prototype: HTMLBqOptionElement;
        new (): HTMLBqOptionElement;
    };
    interface HTMLBqOptionGroupElement extends Components.BqOptionGroup, HTMLStencilElement {
    }
    var HTMLBqOptionGroupElement: {
        prototype: HTMLBqOptionGroupElement;
        new (): HTMLBqOptionGroupElement;
    };
    interface HTMLBqOptionListElement extends Components.BqOptionList, HTMLStencilElement {
    }
    var HTMLBqOptionListElement: {
        prototype: HTMLBqOptionListElement;
        new (): HTMLBqOptionListElement;
    };
    interface HTMLBqRadioElement extends Components.BqRadio, HTMLStencilElement {
    }
    var HTMLBqRadioElement: {
        prototype: HTMLBqRadioElement;
        new (): HTMLBqRadioElement;
    };
    interface HTMLBqRadioGroupElement extends Components.BqRadioGroup, HTMLStencilElement {
    }
    var HTMLBqRadioGroupElement: {
        prototype: HTMLBqRadioGroupElement;
        new (): HTMLBqRadioGroupElement;
    };
    interface HTMLBqSideMenuElement extends Components.BqSideMenu, HTMLStencilElement {
    }
    var HTMLBqSideMenuElement: {
        prototype: HTMLBqSideMenuElement;
        new (): HTMLBqSideMenuElement;
    };
    interface HTMLBqSideMenuItemElement extends Components.BqSideMenuItem, HTMLStencilElement {
    }
    var HTMLBqSideMenuItemElement: {
        prototype: HTMLBqSideMenuItemElement;
        new (): HTMLBqSideMenuItemElement;
    };
    interface HTMLBqSliderElement extends Components.BqSlider, HTMLStencilElement {
    }
    var HTMLBqSliderElement: {
        prototype: HTMLBqSliderElement;
        new (): HTMLBqSliderElement;
    };
    /**
     * Spinners are designed for users to display data loading.
     */
    interface HTMLBqSpinnerElement extends Components.BqSpinner, HTMLStencilElement {
    }
    var HTMLBqSpinnerElement: {
        prototype: HTMLBqSpinnerElement;
        new (): HTMLBqSpinnerElement;
    };
    interface HTMLBqStatusElement extends Components.BqStatus, HTMLStencilElement {
    }
    var HTMLBqStatusElement: {
        prototype: HTMLBqStatusElement;
        new (): HTMLBqStatusElement;
    };
    /**
     * Toggle switches are digital on/off switches.
     * They should provide immediate results, giving users the freedom to control their preferences as needed.
     */
    interface HTMLBqSwitchElement extends Components.BqSwitch, HTMLStencilElement {
    }
    var HTMLBqSwitchElement: {
        prototype: HTMLBqSwitchElement;
        new (): HTMLBqSwitchElement;
    };
    interface HTMLBqTabElement extends Components.BqTab, HTMLStencilElement {
    }
    var HTMLBqTabElement: {
        prototype: HTMLBqTabElement;
        new (): HTMLBqTabElement;
    };
    interface HTMLBqTabGroupElement extends Components.BqTabGroup, HTMLStencilElement {
    }
    var HTMLBqTabGroupElement: {
        prototype: HTMLBqTabGroupElement;
        new (): HTMLBqTabGroupElement;
    };
    interface HTMLBqTextareaElement extends Components.BqTextarea, HTMLStencilElement {
    }
    var HTMLBqTextareaElement: {
        prototype: HTMLBqTextareaElement;
        new (): HTMLBqTextareaElement;
    };
    interface HTMLBqToastElement extends Components.BqToast, HTMLStencilElement {
    }
    var HTMLBqToastElement: {
        prototype: HTMLBqToastElement;
        new (): HTMLBqToastElement;
    };
    interface HTMLBqTooltipElement extends Components.BqTooltip, HTMLStencilElement {
    }
    var HTMLBqTooltipElement: {
        prototype: HTMLBqTooltipElement;
        new (): HTMLBqTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "bq-avatar": HTMLBqAvatarElement;
        "bq-badge": HTMLBqBadgeElement;
        "bq-breadcrumb": HTMLBqBreadcrumbElement;
        "bq-breadcrumb-item": HTMLBqBreadcrumbItemElement;
        "bq-button": HTMLBqButtonElement;
        "bq-checkbox": HTMLBqCheckboxElement;
        "bq-dialog": HTMLBqDialogElement;
        "bq-divider": HTMLBqDividerElement;
        "bq-icon": HTMLBqIconElement;
        "bq-input": HTMLBqInputElement;
        "bq-notification": HTMLBqNotificationElement;
        "bq-option": HTMLBqOptionElement;
        "bq-option-group": HTMLBqOptionGroupElement;
        "bq-option-list": HTMLBqOptionListElement;
        "bq-radio": HTMLBqRadioElement;
        "bq-radio-group": HTMLBqRadioGroupElement;
        "bq-side-menu": HTMLBqSideMenuElement;
        "bq-side-menu-item": HTMLBqSideMenuItemElement;
        "bq-slider": HTMLBqSliderElement;
        "bq-spinner": HTMLBqSpinnerElement;
        "bq-status": HTMLBqStatusElement;
        "bq-switch": HTMLBqSwitchElement;
        "bq-tab": HTMLBqTabElement;
        "bq-tab-group": HTMLBqTabGroupElement;
        "bq-textarea": HTMLBqTextareaElement;
        "bq-toast": HTMLBqToastElement;
        "bq-tooltip": HTMLBqTooltipElement;
    }
}
declare namespace LocalJSX {
    /**
     * An avatar represents an object made of different pieces of information, in a way that is understandable at a glance.
     */
    interface BqAvatar {
        /**
          * Alternate text for the avatar image if the image cannot be displayed
         */
        "altText"?: string;
        /**
          * The image source to load on the avatar (this can be also a base64 encoded image)
         */
        "image"?: string;
        /**
          * The text to display on avatar
         */
        "initials"?: string;
        /**
          * A text to use for describing the avatar on assistive devices
         */
        "label"?: string;
        /**
          * The shape of the avatar
         */
        "shape"?: TAvatarShape;
        /**
          * The size of the avatar
         */
        "size"?: TAvatarSize;
    }
    interface BqBadge {
        /**
          * Badge background color. The value should be a valid value of the palette color
         */
        "backgroundColor"?: string;
        /**
          * The size of the badge. Relevant if badge has no content.
         */
        "size"?: TBadgeSize;
        /**
          * Badge number color. The value should be a valid value of the palette color
         */
        "textColor"?: string;
    }
    interface BqBreadcrumb {
        /**
          * The `aria-label` attribute to describe the type of navigation
         */
        "ariaLabel"?: string;
        /**
          * Handler to be called when `bq-breadcrumb-item` item loses focus.
         */
        "onBqBreadcrumbBlur"?: (event: BqBreadcrumbCustomEvent<HTMLBqBreadcrumbItemElement>) => void;
        /**
          * Handler to be called when `bq-breadcrumb-item` is selected (on click/enter press).
         */
        "onBqBreadcrumbClick"?: (event: BqBreadcrumbCustomEvent<HTMLBqBreadcrumbItemElement>) => void;
        /**
          * Handler to be called when `bq-breadcrumb-item` item gets focus.
         */
        "onBqBreadcrumbFocus"?: (event: BqBreadcrumbCustomEvent<HTMLBqBreadcrumbItemElement>) => void;
    }
    interface BqBreadcrumbItem {
        /**
          * The aria-label that corresponds to the full title of the destination page. This won't be shown in the page, but it will be used by screen readers and other assistive devices.
         */
        "ariaLabel"?: string;
        /**
          * If set, the breadcrumb item will be rendered as an `<a>` with this `href`, otherwise, a `<button>` will be rendered.
         */
        "href"?: string;
        /**
          * If true, the item is the last element inside breadcrumb
         */
        "isLastItem"?: boolean;
        /**
          * Handler to be called when item loses focus
         */
        "onBqBlur"?: (event: BqBreadcrumbItemCustomEvent<HTMLBqBreadcrumbItemElement>) => void;
        /**
          * Handler to be called when item is clicked
         */
        "onBqClick"?: (event: BqBreadcrumbItemCustomEvent<HTMLBqBreadcrumbItemElement>) => void;
        /**
          * Handler to be called when item is focused
         */
        "onBqFocus"?: (event: BqBreadcrumbItemCustomEvent<HTMLBqBreadcrumbItemElement>) => void;
        /**
          * Where to display the link in the browser context. Relevant only if `href` is set.
         */
        "rel"?: string;
        /**
          * Where to display the link in the browser context. Relevant only if `href` is set.
         */
        "target"?: '_blank' | '_parent' | '_self' | '_top';
    }
    /**
     * Buttons are designed for users to take action on a page or a screen.
     */
    interface BqButton {
        /**
          * The appearance style to apply to the button
         */
        "appearance"?: TButtonAppearance;
        /**
          * If `true`, it will make the button fit to its parent width.
         */
        "block"?: boolean;
        /**
          * If true, the button will be disabled (no interaction allowed)
         */
        "disabled"?: boolean;
        /**
          * Tells the browser to treat the linked URL as a download. Only used when `href` is set. Details: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download
         */
        "download"?: string;
        /**
          * When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`
         */
        "href"?: string;
        /**
          * It determinate how the content should be aligned
         */
        "justifyContent"?: 'left' | 'center' | 'right';
        /**
          * If `true` it will display the button in a loading state
         */
        "loading"?: boolean;
        /**
          * Handler to be called when the button loses focus
         */
        "onBqBlur"?: (event: BqButtonCustomEvent<HTMLBqButtonElement>) => void;
        /**
          * Handler to be called when button gets focus
         */
        "onBqClick"?: (event: BqButtonCustomEvent<HTMLBqButtonElement>) => void;
        /**
          * Handler to be called when the button is clicked
         */
        "onBqFocus"?: (event: BqButtonCustomEvent<HTMLBqButtonElement>) => void;
        /**
          * The size of the button
         */
        "size"?: TButtonSize;
        /**
          * Where to display the linked URL, as the name for a browsing context (a `tab`, `window`, or `<iframe>`) Details: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target
         */
        "target"?: '_blank' | '_parent' | '_self' | '_top';
        /**
          * The default behavior of the button
         */
        "type"?: TButtonType;
        /**
          * The variant of button to apply on top of the appearance (applicable only to `appearance="primary"`)
         */
        "variant"?: TButtonVariant;
    }
    interface BqCheckbox {
        /**
          * If true checkbox displays background on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * If true checkbox is checked
         */
        "checked"?: boolean;
        /**
          * If true checkbox is disabled
         */
        "disabled"?: boolean;
        /**
          * The form ID that the checkbox is associated with
         */
        "formId"?: string;
        /**
          * A state that is neither checked nor unchecked
         */
        "indeterminate"?: false;
        /**
          * Name of the HTML input form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * Handler to be called when the checkbox loses focus
         */
        "onBqBlur"?: (event: BqCheckboxCustomEvent<HTMLBqCheckboxElement>) => void;
        /**
          * Handler to be called when the chebkbox state changes
         */
        "onBqChange"?: (event: BqCheckboxCustomEvent<{ checked: boolean }>) => void;
        /**
          * Handler to be called when the checkbox gets focus
         */
        "onBqFocus"?: (event: BqCheckboxCustomEvent<HTMLBqCheckboxElement>) => void;
        /**
          * If `true`, it will indicate that the user must specify a value for the checkbox before the owning form can be submitted
         */
        "required"?: boolean;
        /**
          * A string representing the value of the checkbox. Primarily used to differentiate a list of related checkboxes that have the same name.
         */
        "value": string;
    }
    interface BqDialog {
        /**
          * If true, the backdrop overlay won't be shown when the dialog opens
         */
        "disableBackdrop"?: boolean;
        /**
          * If true, the dialog will not close when clicking on the backdrop overlay
         */
        "disableCloseClickOutside"?: boolean;
        /**
          * If true, the dialog will not close when the [Esc] key is press
         */
        "disableCloseEscKeydown"?: boolean;
        /**
          * The appearance of footer
         */
        "footerApperance"?: TDialogFooterAppearance;
        /**
          * If true, it hides the close button
         */
        "hideCloseButton"?: boolean;
        /**
          * Callback handler emitted when the dialog finish closing
         */
        "onBqAfterClose"?: (event: BqDialogCustomEvent<void>) => void;
        /**
          * Callback handler emitted when the dialog finish opening
         */
        "onBqAfterOpen"?: (event: BqDialogCustomEvent<void>) => void;
        /**
          * Callback handler emitted when the dialog has been canceled or dismissed
         */
        "onBqCancel"?: (event: BqDialogCustomEvent<void>) => void;
        /**
          * Callback handler emitted when the dialog will close
         */
        "onBqClose"?: (event: BqDialogCustomEvent<void>) => void;
        /**
          * Callback handler emitted when the dialog will open
         */
        "onBqOpen"?: (event: BqDialogCustomEvent<void>) => void;
        /**
          * If true, the dialog will be shown as open
         */
        "open"?: boolean;
        /**
          * The size of the dialog
         */
        "size"?: TDialogSize;
    }
    interface BqDivider {
        /**
          * If true, the divider has a dashed pattern
         */
        "dashed"?: boolean;
        /**
          * The default orientation of the divider
         */
        "orientation"?: TDividerOrientation;
        /**
          * Set the min width of the divider's stroke when text is not centered. Value expressed in px
         */
        "strokeBasis"?: number;
        /**
          * Set the stroke color of the divider. The value should be a valid value of the palette color
         */
        "strokeColor"?: string;
        /**
          * Set the gap of the divider's stroke. This is applicable when the stroke is dashed
         */
        "strokeDashGap"?: number;
        /**
          * Set the width of each dash of the divider's stroke. This is applicable when the stroke is dashed
         */
        "strokeDashWidth"?: number;
        /**
          * Set the lineap of the divider's stroke. This is applicable when the stroke is dashed
         */
        "strokeLinecap"?: TDividerStrokeLinecap;
        /**
          * Set the thickness of the divider's stroke. Value expressed in px
         */
        "strokeThickness"?: number;
        /**
          * Set the alignment of the title on the main axis of the divider (horizontal / vertical)
         */
        "titleAlignment"?: TDividerTitleAlignment;
    }
    /**
     * Icons are simplified images that graphically explain the meaning of an object on the screen.
     */
    interface BqIcon {
        /**
          * Set the stroke color of the SVG. The value should be a valid value of the palette color
         */
        "color"?: string;
        /**
          * Icon name to load. Please check all available icons [here](https://phosphoricons.com/)
         */
        "name": string;
        /**
          * Callback handler to be called when the SVG has loaded
         */
        "onSvgLoaded"?: (event: BqIconCustomEvent<any>) => void;
        /**
          * Set the size of the SVG
         */
        "size"?: string | number;
        /**
          * It set the icon weight/style
         */
        "weight"?: TIconWeight;
    }
    interface BqInput {
        /**
          * Controls whether or not the input field should be capitalized and how. Possible values are 'off', 'none', 'on', 'sentences', 'words', and 'characters'. See: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
         */
        "autocapitalize"?: string;
        /**
          * Specifies whether or not the input field should have autocomplete enabled. See: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values
         */
        "autocomplete"?: string;
        /**
          * Controls whether or not the input field should have autocorrect enabled. Possible values are 'on' and 'off'.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * If true, the input will be focused on component render
         */
        "autofocus"?: boolean;
        /**
          * The clear button aria label
         */
        "clearButtonLabel"?: string;
        /**
          * The amount of time, in milliseconds, to wait before emitting the `bqInput` event after the input value changes. A value of 0 means no debouncing will occur.
         */
        "debounceTime"?: number;
        /**
          * If true, the clear button won't be displayed
         */
        "disableClear"?: boolean;
        /**
          * Indicates whether the input is disabled or not. If `true`, the input is disabled and cannot be interacted with.
         */
        "disabled"?: boolean;
        /**
          * The ID of the form that the input field belongs to.
         */
        "form"?: string;
        /**
          * The inputmode attribute specifies what kind of input mechanism would be most helpful for users entering content into the input field. This allows a browser to display an appropriate virtual keyboard while editing. Possible values are 'none', 'text', 'decimal', 'numeric', 'tel', 'search', 'email', 'url', and 'date'.
         */
        "inputmode"?: string;
        /**
          * The maximum value that the input field can accept. Only applies to date and number input types.
         */
        "max"?: number | string;
        /**
          * The maximum number of characters that the input field can accept.
         */
        "maxlength"?: number;
        /**
          * The minimum value that the input field can accept. Only applies to date and number input types.
         */
        "min"?: number | string;
        /**
          * The minimum number of characters that the input field can accept.
         */
        "minlength"?: number;
        /**
          * The input field name.
         */
        "name": string;
        /**
          * Callback handler emitted when the input loses focus
         */
        "onBqBlur"?: (event: BqInputCustomEvent<HTMLBqInputElement>) => void;
        /**
          * Callback handler emitted when the input value has changed and the input loses focus. This handler is called whenever the user finishes typing or pasting text into the input field and then clicks outside of the input field.
         */
        "onBqChange"?: (event: BqInputCustomEvent<{ value: string | number | string[]; el: HTMLBqInputElement }>) => void;
        /**
          * Callback handler emitted when the input value has been cleared
         */
        "onBqClear"?: (event: BqInputCustomEvent<HTMLBqInputElement>) => void;
        /**
          * Callback handler emitted when the input has received focus
         */
        "onBqFocus"?: (event: BqInputCustomEvent<HTMLBqInputElement>) => void;
        /**
          * Callback handler emitted when the input value changes. This handler is called whenever the user types or pastes text into the input field.
         */
        "onBqInput"?: (event: BqInputCustomEvent<{ value: string | number | string[]; el: HTMLBqInputElement }>) => void;
        /**
          * Specifies a regular expression the form control's value should match. See: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern
         */
        "pattern"?: string;
        /**
          * The input placeholder text value
         */
        "placeholder"?: string;
        /**
          * If true, the input field cannot be modified.
         */
        "readonly"?: boolean;
        /**
          * Indicates whether or not the input field is required to be filled out before submitting the form.
         */
        "required"?: boolean;
        /**
          * A number that specifies the granularity that the value must adhere to. Valid for date, month, week, time, datetime-local, number, and range. See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step
         */
        "step"?: number | 'any';
        /**
          * The type attribute specifies the type of input field to display. Possible values are 'text', 'password', 'email', 'number', 'tel', 'search', 'url', and more. See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types
         */
        "type"?: TInputType;
        /**
          * The validation status of the input.
          * @remarks This property is used to indicate the validation status of the input. It can be set to one of the following values: - `'none'`: No validation status is set. - `'error'`: The input has a validation error. - `'warning'`: The input has a validation warning. - `'success'`: The input has passed validation.
         */
        "validationStatus"?: TInputValidation;
        /**
          * The input value, it can be used to reset the input to a previous value
         */
        "value"?: TInputValue;
    }
    interface BqNotification {
        /**
          * If true, the notification will automatically hide after the specified amount of time
         */
        "autoDismiss"?: boolean;
        /**
          * If true, the close button at the top right of the notification won't be shown
         */
        "disableClose"?: boolean;
        /**
          * If true, the notification icon won't be shown
         */
        "hideIcon"?: boolean;
        /**
          * Callback handler to be called when the notification is hidden
         */
        "onBqHide"?: (event: BqNotificationCustomEvent<any>) => void;
        /**
          * Callback handler to be called when the notification is shown
         */
        "onBqShow"?: (event: BqNotificationCustomEvent<any>) => void;
        /**
          * If true, the notification will be shown
         */
        "open"?: boolean;
        /**
          * The length of time, in milliseconds, after which the notification will close itself. Only valid if `autoDismiss="true"`
         */
        "time"?: number;
        /**
          * Type of Notification
         */
        "type"?: TNotificationType;
    }
    interface BqOption {
        /**
          * If true, the option is disabled.
         */
        "disabled"?: boolean;
        /**
          * Handler to be called when item loses focus
         */
        "onBqBlur"?: (event: BqOptionCustomEvent<HTMLBqOptionElement>) => void;
        /**
          * Handler to be called when item is clicked
         */
        "onBqClick"?: (event: BqOptionCustomEvent<HTMLBqOptionElement>) => void;
        /**
          * Handler to be called on enter key press
         */
        "onBqEnter"?: (event: BqOptionCustomEvent<HTMLBqOptionElement>) => void;
        /**
          * Handler to be called when item is focused
         */
        "onBqFocus"?: (event: BqOptionCustomEvent<HTMLBqOptionElement>) => void;
        /**
          * If true, the option is selected and active.
         */
        "selected"?: boolean;
        /**
          * A string representing the value of the option. Can be used to identify the item
         */
        "value"?: string;
    }
    interface BqOptionGroup {
    }
    interface BqOptionList {
        /**
          * If true, the option is selected and active.
         */
        "ariaLabel"?: string;
        /**
          * Handler to be called when `bq-option` is selected (on click/enter press).
         */
        "onBqSelect"?: (event: BqOptionListCustomEvent<{ value: string; item: HTMLBqOptionElement }>) => void;
    }
    interface BqRadio {
        /**
          * If true radio displays background on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * If true radio input is checked
         */
        "checked"?: boolean;
        /**
          * If true radio input is disabled
         */
        "disabled"?: boolean;
        /**
          * The form ID that the radio input is associated with
         */
        "formId"?: string;
        /**
          * Name of the HTML input form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * Handler to be called when the radio loses focus
         */
        "onBqBlur"?: (event: BqRadioCustomEvent<HTMLBqRadioElement>) => void;
        /**
          * Handler to be called when the radio state changes
         */
        "onBqClick"?: (event: BqRadioCustomEvent<HTMLBqRadioElement>) => void;
        /**
          * Handler to be called when the radio gets focus
         */
        "onBqFocus"?: (event: BqRadioCustomEvent<HTMLBqRadioElement>) => void;
        /**
          * Handler to be called when the radio key is pressed
         */
        "onBqKeyDown"?: (event: BqRadioCustomEvent<KeyboardEvent>) => void;
        /**
          * If `true`, it will indicate that the user must specify a value for the radio before the owning form can be submitted
         */
        "required"?: boolean;
        /**
          * A string representing the value of the radio.
         */
        "value": string;
    }
    interface BqRadioGroup {
        /**
          * If true, all radio inputs in the group will display a background on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * A number representing the delay time (in milliseconds) that `bqChange` event handler gets triggered once the value change
         */
        "debounceTime"?: number;
        /**
          * If true radio inputs are disabled
         */
        "disabled"?: boolean;
        /**
          * If true displays fieldset
         */
        "fieldset"?: boolean;
        /**
          * Name of the HTML input form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * Handler to be called when the radio state changes
         */
        "onBqChange"?: (event: BqRadioGroupCustomEvent<{ value: string; target: HTMLBqRadioElement }>) => void;
        /**
          * The display orientation of the radio inputs
         */
        "orientation"?: TRadioGroupOrientation;
        /**
          * A string representing the value of the radio.
         */
        "value"?: string;
    }
    interface BqSideMenu {
        /**
          * It sets a predefined appearance of the side menu
         */
        "appearance"?: TSideMenuAppearance;
        /**
          * If true, the container will reduce its width
         */
        "collapse"?: boolean;
        /**
          * Callback handler to be called when the Side menu changes its width from expanded to collapse and vice versa
         */
        "onBqCollapse"?: (event: BqSideMenuCustomEvent<{ collapse: boolean }>) => void;
        /**
          * Callback handler to be called when the active/selected menu item changes
         */
        "onBqSelect"?: (event: BqSideMenuCustomEvent<HTMLBqSideMenuItemElement>) => void;
        /**
          * It sets the size of the navigation menu items
         */
        "size"?: TSideMenuSize;
    }
    interface BqSideMenuItem {
        /**
          * If true, the menu item will be shown as active/selected.
         */
        "active"?: boolean;
        /**
          * If true, the item label and suffix will be hidden and the with will be reduce according to its parent
         */
        "collapse"?: boolean;
        /**
          * If true, the menu item will be disabled (no interaction allowed)
         */
        "disabled"?: boolean;
        /**
          * Handler to be called when the button loses focus
         */
        "onBqBlur"?: (event: BqSideMenuItemCustomEvent<HTMLBqSideMenuItemElement>) => void;
        /**
          * Handler to be called when button gets focus
         */
        "onBqClick"?: (event: BqSideMenuItemCustomEvent<HTMLBqSideMenuItemElement>) => void;
        /**
          * Handler to be called when the button is clicked
         */
        "onBqFocus"?: (event: BqSideMenuItemCustomEvent<HTMLBqSideMenuItemElement>) => void;
    }
    interface BqSlider {
        /**
          * A number representing the delay value applied to bqChange event handler
         */
        "debounceTime"?: number;
        /**
          * If `true` slider is disabled
         */
        "disabled"?: boolean;
        /**
          * A number representing the minimum value between the min and max range selected.
         */
        "gap"?: number;
        /**
          * A number representing the max value of the slider.
         */
        "max"?: number;
        /**
          * A number representing the min value of the slider.
         */
        "min"?: number;
        /**
          * Handler to be called when the slider loses focus
         */
        "onBqBlur"?: (event: BqSliderCustomEvent<HTMLBqSliderElement>) => void;
        /**
          * Handler to be called when change the value on range inputs
         */
        "onBqChange"?: (event: BqSliderCustomEvent<{ value: number | Array<number> | string; el: HTMLBqSliderElement }>) => void;
        /**
          * Handler to be called when the slider gets focused
         */
        "onBqFocus"?: (event: BqSliderCustomEvent<HTMLBqSliderElement>) => void;
        /**
          * A number representing the step of the slider.
         */
        "step"?: number;
        /**
          * It defines the type of slider to display
         */
        "type"?: TSliderType;
        /**
          * A number representing the value of the slider.
         */
        "value"?: number | Array<number> | string;
        /**
          * If `true` it will display the min and max values
         */
        "valueIndicator"?: boolean;
    }
    /**
     * Spinners are designed for users to display data loading.
     */
    interface BqSpinner {
        /**
          * If `false`, the animation on the icon element will be stopped
         */
        "animation"?: boolean;
        /**
          * It defines the size of the icon element displayed
         */
        "size"?: TSpinnerSize;
        /**
          * It defines the position of the label text
         */
        "textPosition"?: TSpinnerTextPosition;
    }
    interface BqStatus {
        /**
          * It defines the type of status to display
         */
        "type"?: TStatusType;
    }
    /**
     * Toggle switches are digital on/off switches.
     * They should provide immediate results, giving users the freedom to control their preferences as needed.
     */
    interface BqSwitch {
        /**
          * If true, a background will be displayed on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * It indicates whether if the switch is `ON` by default (when the page loads)
         */
        "checked"?: boolean;
        /**
          * If true, the switch control will be disabled and no interaction will be allowed
         */
        "disabled"?: boolean;
        /**
          * If true, the component will take the full width space available on the parent container
         */
        "fullWidth"?: boolean;
        /**
          * It indicates how to to display the on/off marks inside the control, with icons or none (default)
         */
        "innerLabel"?: TSwitchInnerLabel;
        /**
          * It defines how to distribute the space between and around the control and the label text (https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)
         */
        "justifyContent"?: TSwitchJustifyContent;
        /**
          * Name of the form control. Submitted with the form as part of a name/value pair
         */
        "name": string;
        /**
          * Handler to be called when the switch loses focus
         */
        "onBqBlur"?: (event: BqSwitchCustomEvent<HTMLBqSwitchElement>) => void;
        /**
          * Handler to be called when the switch state changes
         */
        "onBqChange"?: (event: BqSwitchCustomEvent<{ checked: boolean }>) => void;
        /**
          * Handler to be called when the switch gets focus
         */
        "onBqFocus"?: (event: BqSwitchCustomEvent<HTMLBqSwitchElement>) => void;
        /**
          * If `true`, it will indicate that the user must switch `ON` the element before the owning form can be submitted
         */
        "required"?: boolean;
        /**
          * If true, the order of the control and the label text will be changed
         */
        "reverseOrder"?: boolean;
        /**
          * The input control's value, submitted as a name/value pair with form data.
         */
        "value"?: string;
    }
    interface BqTab {
        /**
          * If true tab is active
         */
        "active"?: boolean;
        /**
          * The tab panel id that the tab controls
         */
        "controls": string;
        /**
          * If true tab is disabled
         */
        "disabled"?: boolean;
        /**
          * Handler to be called when the tab loses focus
         */
        "onBqBlur"?: (event: BqTabCustomEvent<HTMLBqTabElement>) => void;
        /**
          * Handler to be called when the tab state changes
         */
        "onBqClick"?: (event: BqTabCustomEvent<HTMLBqTabElement>) => void;
        /**
          * Handler to be called when the tab gets focus
         */
        "onBqFocus"?: (event: BqTabCustomEvent<HTMLBqTabElement>) => void;
        /**
          * Handler to be called when the tab key is pressed
         */
        "onBqKeyDown"?: (event: BqTabCustomEvent<KeyboardEvent>) => void;
        /**
          * The size of the tab
         */
        "size"?: TTabSize;
        /**
          * The id of the tab
         */
        "tabId": string;
    }
    interface BqTabGroup {
        /**
          * A number representing the delay value applied to bqChange event handler
         */
        "debounceTime"?: number;
        /**
          * If true, the underline divider below the tabs won't be shown
         */
        "disableDivider"?: boolean;
        /**
          * Handler to be called when the tab value changes
         */
        "onBqChange"?: (event: BqTabGroupCustomEvent<{ target: HTMLBqTabElement; value: string }>) => void;
        /**
          * The size of the tab
         */
        "size"?: TTabSize;
        /**
          * A string representing the id of the selected tab.
         */
        "value"?: string;
    }
    interface BqTextarea {
        /**
          * If `true`, the textarea will automatically grow and shrink to fit its contents. If `false`, the textarea will have a fixed height specified by the `rows` property.
         */
        "autoGrow"?: boolean;
        /**
          * The amount of time, in milliseconds, to wait before emitting the `bqInput` event after the textarea value changes. A value of 0 means no debouncing will occur.
         */
        "debounceTime"?: number;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled"?: boolean;
        /**
          * The maximum number of characters that can be entered into the textarea (`0`: no limit). When enabled, a character counter will be shown underneath the textarea.
         */
        "maxlength"?: number;
        /**
          * The name of the textarea element.
         */
        "name": string;
        /**
          * Callback handler emitted when the textarea loses focus
         */
        "onBqBlur"?: (event: BqTextareaCustomEvent<HTMLBqTextareaElement>) => void;
        /**
          * Callback handler emitted when the textarea value has changed and the textarea loses focus. This handler is called whenever the user finishes typing or pasting text into the textarea field and then clicks outside of the textarea field.
         */
        "onBqChange"?: (event: BqTextareaCustomEvent<{ value: string | number | string[]; el: HTMLBqTextareaElement }>) => void;
        /**
          * Callback handler emitted when the textarea value has been cleared
         */
        "onBqClear"?: (event: BqTextareaCustomEvent<HTMLBqTextareaElement>) => void;
        /**
          * Callback handler emitted when the textarea has received focus
         */
        "onBqFocus"?: (event: BqTextareaCustomEvent<HTMLBqTextareaElement>) => void;
        /**
          * Callback handler emitted when the textarea value changes. This handler is called whenever the user types or pastes text into the textarea field.
         */
        "onBqInput"?: (event: BqTextareaCustomEvent<{ value: string | number | string[]; el: HTMLBqTextareaElement }>) => void;
        /**
          * The placeholder text to show when there is no value.
         */
        "placeholder": string;
        /**
          * The number of visible text lines for the control. It must be a positive integer.
         */
        "rows"?: number;
        /**
          * The validation status of the input.
          * @remarks This property is used to indicate the validation status of the input. It can be set to one of the following values: - `'none'`: No validation status is set. - `'error'`: The input has a validation error. - `'warning'`: The input has a validation warning. - `'success'`: The input has passed validation.
         */
        "validationStatus"?: TInputValidation;
        /**
          * The value of the textarea. It can be used to reset the input to a previous value.
         */
        "value"?: string;
    }
    interface BqToast {
        /**
          * If true will hide toast icon
         */
        "hideIcon"?: boolean;
        /**
          * Callback handler to be called when the notification is hidden
         */
        "onBqHide"?: (event: BqToastCustomEvent<HTMLBqToastElement>) => void;
        /**
          * Callback handler to be called when the notification is shown
         */
        "onBqShow"?: (event: BqToastCustomEvent<HTMLBqToastElement>) => void;
        /**
          * If true, the toast will be shown
         */
        "open"?: boolean;
        /**
          * Placement of toast
         */
        "placement"?: TToastPlacement;
        /**
          * The length of time, in milliseconds, after which the toast will close itself
         */
        "time"?: number;
        /**
          * Type of toast
         */
        "type"?: TToastType;
    }
    interface BqTooltip {
        /**
          * Set the action when the tooltip should be displayed, on hover (default) or click
         */
        "displayOn"?: 'click' | 'hover';
        /**
          * Distance between trigger element and tooltip
         */
        "distance"?: number;
        /**
          * If true, the arrow on the tooltip content won't be shown
         */
        "hideArrow"?: boolean;
        "placement"?: FloatingUIPlacement;
        /**
          * Whether the tooltip should have the same width as the trigger element (applicable only for content shorter than the trigger element)
         */
        "sameWidth"?: boolean;
        /**
          * Indicates whether or not the tooltip is visible
         */
        "visible"?: boolean;
    }
    interface IntrinsicElements {
        "bq-avatar": BqAvatar;
        "bq-badge": BqBadge;
        "bq-breadcrumb": BqBreadcrumb;
        "bq-breadcrumb-item": BqBreadcrumbItem;
        "bq-button": BqButton;
        "bq-checkbox": BqCheckbox;
        "bq-dialog": BqDialog;
        "bq-divider": BqDivider;
        "bq-icon": BqIcon;
        "bq-input": BqInput;
        "bq-notification": BqNotification;
        "bq-option": BqOption;
        "bq-option-group": BqOptionGroup;
        "bq-option-list": BqOptionList;
        "bq-radio": BqRadio;
        "bq-radio-group": BqRadioGroup;
        "bq-side-menu": BqSideMenu;
        "bq-side-menu-item": BqSideMenuItem;
        "bq-slider": BqSlider;
        "bq-spinner": BqSpinner;
        "bq-status": BqStatus;
        "bq-switch": BqSwitch;
        "bq-tab": BqTab;
        "bq-tab-group": BqTabGroup;
        "bq-textarea": BqTextarea;
        "bq-toast": BqToast;
        "bq-tooltip": BqTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * An avatar represents an object made of different pieces of information, in a way that is understandable at a glance.
             */
            "bq-avatar": LocalJSX.BqAvatar & JSXBase.HTMLAttributes<HTMLBqAvatarElement>;
            "bq-badge": LocalJSX.BqBadge & JSXBase.HTMLAttributes<HTMLBqBadgeElement>;
            "bq-breadcrumb": LocalJSX.BqBreadcrumb & JSXBase.HTMLAttributes<HTMLBqBreadcrumbElement>;
            "bq-breadcrumb-item": LocalJSX.BqBreadcrumbItem & JSXBase.HTMLAttributes<HTMLBqBreadcrumbItemElement>;
            /**
             * Buttons are designed for users to take action on a page or a screen.
             */
            "bq-button": LocalJSX.BqButton & JSXBase.HTMLAttributes<HTMLBqButtonElement>;
            "bq-checkbox": LocalJSX.BqCheckbox & JSXBase.HTMLAttributes<HTMLBqCheckboxElement>;
            "bq-dialog": LocalJSX.BqDialog & JSXBase.HTMLAttributes<HTMLBqDialogElement>;
            "bq-divider": LocalJSX.BqDivider & JSXBase.HTMLAttributes<HTMLBqDividerElement>;
            /**
             * Icons are simplified images that graphically explain the meaning of an object on the screen.
             */
            "bq-icon": LocalJSX.BqIcon & JSXBase.HTMLAttributes<HTMLBqIconElement>;
            "bq-input": LocalJSX.BqInput & JSXBase.HTMLAttributes<HTMLBqInputElement>;
            "bq-notification": LocalJSX.BqNotification & JSXBase.HTMLAttributes<HTMLBqNotificationElement>;
            "bq-option": LocalJSX.BqOption & JSXBase.HTMLAttributes<HTMLBqOptionElement>;
            "bq-option-group": LocalJSX.BqOptionGroup & JSXBase.HTMLAttributes<HTMLBqOptionGroupElement>;
            "bq-option-list": LocalJSX.BqOptionList & JSXBase.HTMLAttributes<HTMLBqOptionListElement>;
            "bq-radio": LocalJSX.BqRadio & JSXBase.HTMLAttributes<HTMLBqRadioElement>;
            "bq-radio-group": LocalJSX.BqRadioGroup & JSXBase.HTMLAttributes<HTMLBqRadioGroupElement>;
            "bq-side-menu": LocalJSX.BqSideMenu & JSXBase.HTMLAttributes<HTMLBqSideMenuElement>;
            "bq-side-menu-item": LocalJSX.BqSideMenuItem & JSXBase.HTMLAttributes<HTMLBqSideMenuItemElement>;
            "bq-slider": LocalJSX.BqSlider & JSXBase.HTMLAttributes<HTMLBqSliderElement>;
            /**
             * Spinners are designed for users to display data loading.
             */
            "bq-spinner": LocalJSX.BqSpinner & JSXBase.HTMLAttributes<HTMLBqSpinnerElement>;
            "bq-status": LocalJSX.BqStatus & JSXBase.HTMLAttributes<HTMLBqStatusElement>;
            /**
             * Toggle switches are digital on/off switches.
             * They should provide immediate results, giving users the freedom to control their preferences as needed.
             */
            "bq-switch": LocalJSX.BqSwitch & JSXBase.HTMLAttributes<HTMLBqSwitchElement>;
            "bq-tab": LocalJSX.BqTab & JSXBase.HTMLAttributes<HTMLBqTabElement>;
            "bq-tab-group": LocalJSX.BqTabGroup & JSXBase.HTMLAttributes<HTMLBqTabGroupElement>;
            "bq-textarea": LocalJSX.BqTextarea & JSXBase.HTMLAttributes<HTMLBqTextareaElement>;
            "bq-toast": LocalJSX.BqToast & JSXBase.HTMLAttributes<HTMLBqToastElement>;
            "bq-tooltip": LocalJSX.BqTooltip & JSXBase.HTMLAttributes<HTMLBqTooltipElement>;
        }
    }
}
