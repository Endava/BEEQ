/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TAvatarShape, TAvatarSize } from "./components/avatar/bq-avatar.types";
import { TBadgeSize } from "./components/badge/bq-badge.types";
import { TButtonAppearance, TButtonSize, TButtonType, TButtonVariant } from "./components/button/bq-button.types";
import { TDialogFooterAppearance, TDialogSize } from "./components/dialog/bq-dialog.types";
import { TDividerOrientation, TDividerStrokeLinecap, TDividerTitleAlignment } from "./components/divider/bq-divider.types";
import { TIconWeight } from "./components/icon/bq-icon.types";
import { TNotificationType } from "./components/notification/bq-notification.types";
import { TRadioGroupOrientation } from "./components/radio-group/bq-radio-group.types";
import { TSideMenuAppearance, TSideMenuSize } from "./components/side-menu/bq-side-menu.types";
import { TSliderType } from "./components/slider/bq-slider.types";
import { TSpinnerSize, TSpinnerTextPosition } from "./components/spinner/bq-spinner.types";
import { TStatusType } from "./components/status/bq-status.types";
import { TSwitchInnerLabel, TSwitchJustifyContent } from "./components/switch/bq-swithc.types";
import { TTabSize } from "./components/tab/bq-tab.types";
import { FloatingUIPlacement } from "./services/interfaces";
export { TAvatarShape, TAvatarSize } from "./components/avatar/bq-avatar.types";
export { TBadgeSize } from "./components/badge/bq-badge.types";
export { TButtonAppearance, TButtonSize, TButtonType, TButtonVariant } from "./components/button/bq-button.types";
export { TDialogFooterAppearance, TDialogSize } from "./components/dialog/bq-dialog.types";
export { TDividerOrientation, TDividerStrokeLinecap, TDividerTitleAlignment } from "./components/divider/bq-divider.types";
export { TIconWeight } from "./components/icon/bq-icon.types";
export { TNotificationType } from "./components/notification/bq-notification.types";
export { TRadioGroupOrientation } from "./components/radio-group/bq-radio-group.types";
export { TSideMenuAppearance, TSideMenuSize } from "./components/side-menu/bq-side-menu.types";
export { TSliderType } from "./components/slider/bq-slider.types";
export { TSpinnerSize, TSpinnerTextPosition } from "./components/spinner/bq-spinner.types";
export { TStatusType } from "./components/status/bq-status.types";
export { TSwitchInnerLabel, TSwitchJustifyContent } from "./components/switch/bq-swithc.types";
export { TTabSize } from "./components/tab/bq-tab.types";
export { FloatingUIPlacement } from "./services/interfaces";
export namespace Components {
    /**
     * An avatar represents an object made of different pieces of information, in a way that is understandable at a glance.
     */
    interface BqAvatar {
        /**
          * Alternate text for the avatar image if the image cannot be displayed
         */
        "altText": string;
        /**
          * The image source to load on the avatar (this can be also a base64 encoded image)
         */
        "image": string;
        /**
          * The text to display on avatar
         */
        "initials": string;
        /**
          * A text to use for describing the avatar on assistive devices
         */
        "label": string;
        /**
          * The shape of the avatar
         */
        "shape": TAvatarShape;
        /**
          * The size of the avatar
         */
        "size": TAvatarSize;
    }
    interface BqBadge {
        /**
          * Badge background color. The value should be a valid value of the palette color
         */
        "backgroundColor"?: string;
        /**
          * The size of the badge
         */
        "size"?: TBadgeSize;
        /**
          * Badge number color. The value should be a valid value of the palette color
         */
        "textColor"?: string;
    }
    /**
     * Buttons are designed for users to take action on a page or a screen.
     */
    interface BqButton {
        /**
          * The appearance style to apply to the button
         */
        "appearance": TButtonAppearance;
        /**
          * If `true`, it will make the button fit to its parent width.
         */
        "block": boolean;
        /**
          * If true, the button will be disabled (no interaction allowed)
         */
        "disabled": boolean;
        /**
          * Tells the browser to treat the linked URL as a download. Only used when `href` is set. Details: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download
         */
        "download"?: string;
        /**
          * When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`
         */
        "href": string;
        /**
          * It determinate how the content should be aligned
         */
        "justifyContent": 'left' | 'center' | 'right';
        /**
          * If `true` it will display the button in a loading state
         */
        "loading": boolean;
        /**
          * The size of the button
         */
        "size": TButtonSize;
        /**
          * Where to display the linked URL, as the name for a browsing context (a `tab`, `window`, or `<iframe>`) Details: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target
         */
        "target": '_blank' | '_parent' | '_self' | '_top';
        /**
          * The default behavior of the button
         */
        "type": TButtonType;
        /**
          * The variant of button to apply on top of the appearance (applicable only to `appearance="primary"`)
         */
        "variant": TButtonVariant;
    }
    interface BqCheckbox {
        /**
          * If true checkbox displays background on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * If true checkbox is checked
         */
        "checked"?: boolean;
        /**
          * If true checkbox is disabled
         */
        "disabled"?: boolean;
        /**
          * The form ID that the checkbox is associated with
         */
        "formId"?: string;
        /**
          * A state that is neither checked nor unchecked
         */
        "indeterminate": false;
        /**
          * Name of the HTML input form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * If `true`, it will indicate that the user must specify a value for the checkbox before the owning form can be submitted
         */
        "required"?: boolean;
        /**
          * Remove focus from the native `<input>` HTML element used under the hood. Use this method instead of the global `element.blur()`.
         */
        "vBlur": () => Promise<void>;
        /**
          * Simulate a click event on the native `<input>` HTML element used under the hood. Use this method instead of the global `element.click()`.
         */
        "vClick": () => Promise<void>;
        /**
          * Sets focus on the native `<input>` HTML element used under the hood. Use this method instead of the global `element.focus()`.
         */
        "vFocus": () => Promise<void>;
        /**
          * A string representing the value of the checkbox. Primarily used to differentiate a list of related checkboxes that have the same name.
         */
        "value": string;
    }
    interface BqDialog {
        /**
          * Hides  the dialog
         */
        "close": () => Promise<void>;
        /**
          * If true will not close on outside click
         */
        "disableOutsideClickClose": boolean;
        /**
          * The appearance of footer
         */
        "footerApperance": TDialogFooterAppearance;
        /**
          * If true it hides close button
         */
        "hideCloseButton": boolean;
        /**
          * Shows the dialog
         */
        "open": () => Promise<void>;
        /**
          * The size of the dialog
         */
        "size": TDialogSize;
    }
    interface BqDivider {
        /**
          * If true, the divider has a dashed pattern
         */
        "dashed": boolean;
        /**
          * The default orientation of the divider
         */
        "orientation": TDividerOrientation;
        /**
          * Set the min width of the divider's stroke when text is not centered. Value expressed in px
         */
        "strokeBasis"?: number;
        /**
          * Set the stroke color of the divider. The value should be a valid value of the palette color
         */
        "strokeColor"?: string;
        /**
          * Set the gap of the divider's stroke. This is applicable when the stroke is dashed
         */
        "strokeDashGap"?: number;
        /**
          * Set the width of each dash of the divider's stroke. This is applicable when the stroke is dashed
         */
        "strokeDashWidth"?: number;
        /**
          * Set the lineap of the divider's stroke. This is applicable when the stroke is dashed
         */
        "strokeLinecap"?: TDividerStrokeLinecap;
        /**
          * Set the thickness of the divider's stroke. Value expressed in px
         */
        "strokeThickness"?: number;
        /**
          * Set the alignment of the title on the main axis of the divider (horizontal / vertical)
         */
        "titleAlignment"?: TDividerTitleAlignment;
    }
    /**
     * Icons are simplified images that graphically explain the meaning of an object on the screen.
     */
    interface BqIcon {
        /**
          * Set the stroke color of the SVG. The value should be a valid value of the palette color
         */
        "color"?: string;
        /**
          * Icon name to load. Please check all available icons [here](https://phosphoricons.com/)
         */
        "name": string;
        /**
          * Set the size of the SVG
         */
        "size"?: string | number;
        /**
          * It set the icon weight/style
         */
        "weight"?: TIconWeight;
    }
    interface BqNotification {
        /**
          * If true, the notification will automatically hide after the specified amount of time
         */
        "autoDismiss": boolean;
        /**
          * If true, the close button at the top right of the notification won't be shown
         */
        "disableClose": boolean;
        /**
          * If true, the predefined icon type won't be shown and a custom icon provided on integration will be displayed instead
         */
        "hasCustomIcon": boolean;
        /**
          * Method to be called to hide the notification component
         */
        "hide": () => Promise<void>;
        /**
          * If true, the notification icon won't be shown
         */
        "hideIcon": boolean;
        /**
          * If true, the notification will be shown
         */
        "isOpen": boolean;
        /**
          * Method to be called to show the notification component
         */
        "show": () => Promise<void>;
        /**
          * The length of time, in milliseconds, after which the notification will close itself. Only valid if `autoDismiss="true"`
         */
        "time": number;
        /**
          * This method can be used to display notifications in a fixed-position element that allows for stacking multiple notifications vertically.
         */
        "toast": () => Promise<void>;
        /**
          * Type of Notification
         */
        "type": TNotificationType;
    }
    interface BqRadio {
        /**
          * If true radio displays background on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * If true radio input is checked
         */
        "checked"?: boolean;
        /**
          * If true radio input is disabled
         */
        "disabled"?: boolean;
        /**
          * The form ID that the radio input is associated with
         */
        "formId"?: string;
        /**
          * Name of the HTML input form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * If `true`, it will indicate that the user must specify a value for the radio before the owning form can be submitted
         */
        "required"?: boolean;
        /**
          * Remove focus from the native `<input>` HTML element used under the hood. Use this method instead of the global `element.blur()`.
         */
        "vBlur": () => Promise<void>;
        /**
          * Simulate a click event on the native `<input>` HTML element used under the hood. Use this method instead of the global `element.click()`.
         */
        "vClick": () => Promise<void>;
        /**
          * Sets focus on the native `<input>` HTML element used under the hood. Use this method instead of the global `element.focus()`.
         */
        "vFocus": () => Promise<void>;
        /**
          * A string representing the value of the radio.
         */
        "value": string;
    }
    interface BqRadioGroup {
        /**
          * If true, all radio inputs in the group will display a background on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * A number representing the delay time (in milliseconds) that `bqChange` event handler gets triggered once the value change
         */
        "debounceTime": number;
        /**
          * If true radio inputs are disabled
         */
        "disabled"?: boolean;
        /**
          * If true displays fieldset
         */
        "fieldset"?: boolean;
        /**
          * Name of the HTML input form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * The display orientation of the radio inputs
         */
        "orientation": TRadioGroupOrientation;
        /**
          * A string representing the value of the radio.
         */
        "value"?: string;
    }
    interface BqSideMenu {
        /**
          * It sets a predefined appearance of the side menu
         */
        "appearance": TSideMenuAppearance;
        /**
          * If true, the container will reduce its width
         */
        "collapse": boolean;
        /**
          * It sets the size of the navigation menu items
         */
        "size": TSideMenuSize;
        /**
          * Toggle the collapse state of the side menu
         */
        "toggleCollapse": () => Promise<void>;
    }
    interface BqSideMenuItem {
        /**
          * If true, the menu item will be shown as active/selected.
         */
        "active": boolean;
        /**
          * If true, the item label and suffix will be hidden and the with will be reduce according to its parent
         */
        "collapse": boolean;
        /**
          * If true, the menu item will be disabled (no interaction allowed)
         */
        "disabled": boolean;
    }
    interface BqSlider {
        /**
          * A number representing the delay value applied to bqChange event handler
         */
        "debounceTime": number;
        /**
          * If `true` slider is disabled
         */
        "disabled"?: boolean;
        /**
          * A number representing the minimum value between the min and max range selected.
         */
        "gap": number;
        /**
          * A number representing the max value of the slider.
         */
        "max": number;
        /**
          * A number representing the min value of the slider.
         */
        "min": number;
        /**
          * A number representing the step of the slider.
         */
        "step": number;
        /**
          * It defines the type of slider to display
         */
        "type": TSliderType;
        /**
          * A number representing the value of the slider.
         */
        "value": number | Array<number> | string;
        /**
          * If `true` it will display the min and max values
         */
        "valueIndicator"?: boolean;
    }
    /**
     * Spinners are designed for users to display data loading.
     */
    interface BqSpinner {
        /**
          * If `false`, the animation on the icon element will be stopped
         */
        "animation"?: boolean;
        /**
          * It defines the size of the icon element displayed
         */
        "size": TSpinnerSize;
        /**
          * It defines the position of the label text
         */
        "textPosition": TSpinnerTextPosition;
    }
    interface BqStatus {
        /**
          * It defines the type of status to display
         */
        "type": TStatusType;
    }
    /**
     * Toggle switches are digital on/off switches.
     * They should provide immediate results, giving users the freedom to control their preferences as needed.
     */
    interface BqSwitch {
        /**
          * If true, a background will be displayed on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * It indicates whether if the switch is `ON` by default (when the page loads)
         */
        "checked"?: boolean;
        /**
          * If true, the switch control will be disabled and no interaction will be allowed
         */
        "disabled"?: boolean;
        /**
          * If true, the component will take the full width space available on the parent container
         */
        "fullWidth"?: boolean;
        /**
          * It indicates how to to display the on/off marks inside the control, with icons or none (default)
         */
        "innerLabel"?: TSwitchInnerLabel;
        /**
          * It defines how to distribute the space between and around the control and the label text (https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)
         */
        "justifyContent"?: TSwitchJustifyContent;
        /**
          * Name of the form control. Submitted with the form as part of a name/value pair
         */
        "name": string;
        /**
          * If `true`, it will indicate that the user must switch `ON` the element before the owning form can be submitted
         */
        "required"?: boolean;
        /**
          * If true, the order of the control and the label text will be changed
         */
        "reverseOrder"?: boolean;
        /**
          * Remove focus from the native `<input>` HTML element used under the hood. Use this method instead of the global `element.blur()`.
         */
        "vBlur": () => Promise<void>;
        /**
          * Simulate a click event on the native `<input>` HTML element used under the hood. Use this method instead of the global `element.click()`.
         */
        "vClick": () => Promise<void>;
        /**
          * Sets focus on the native `<input>` HTML element used under the hood. Use this method instead of the global `element.focus()`.
         */
        "vFocus": () => Promise<void>;
        /**
          * The input control's value, submitted as a name/value pair with form data.
         */
        "value"?: string;
    }
    interface BqTab {
        /**
          * If true tab is active
         */
        "active"?: boolean;
        /**
          * The tab panel id that the tab controls
         */
        "controls": string;
        /**
          * If true tab is disabled
         */
        "disabled": boolean;
        /**
          * Sets tabindex on the native `<button>` HTML element used under the hood. This method is used inside `<bq-tab-group>` to make tab focusable after the active one is focused
         */
        "enableFocus": (value: boolean) => Promise<void>;
        /**
          * The size of the tab
         */
        "size": TTabSize;
        /**
          * The id of the tab
         */
        "tabId": string;
        /**
          * Remove focus from the native `<button>` HTML element used under the hood. Use this method instead of the global `element.blur()`.
         */
        "vBlur": () => Promise<void>;
        /**
          * Simulate a click event on the native `<button>` HTML element used under the hood. Use this method instead of the global `element.click()`.
         */
        "vClick": () => Promise<void>;
        /**
          * Sets focus on the native `<button>` HTML element used under the hood. Use this method instead of the global `element.focus()`.
         */
        "vFocus": () => Promise<void>;
    }
    interface BqTabGroup {
        /**
          * A number representing the delay value applied to bqChange event handler
         */
        "debounceTime": number;
        /**
          * If true, the underline divider below the tabs won't be shown
         */
        "disableDivider": boolean;
        /**
          * The size of the tab
         */
        "size": TTabSize;
        /**
          * A string representing the id of the selected tab.
         */
        "value": string;
    }
    interface BqTooltip {
        /**
          * Set the action when the tooltip should be displayed, on hover (default) or click
         */
        "displayOn": 'click' | 'hover';
        /**
          * Distance between trigger element and tooltip
         */
        "distance"?: number;
        /**
          * Hides the tooltip
         */
        "hide": () => Promise<void>;
        /**
          * If true, the arrow on the tooltip content won't be shown
         */
        "hideArrow"?: boolean;
        "placement"?: FloatingUIPlacement;
        /**
          * Whether the tooltip should have the same width as the trigger element (applicable only for content shorter than the trigger element)
         */
        "sameWidth"?: boolean;
        /**
          * Shows the tooltip
         */
        "show": () => Promise<void>;
        /**
          * Indicates whether or not the tooltip is visible
         */
        "visible"?: boolean;
    }
}
export interface BqButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqButtonElement;
}
export interface BqCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqCheckboxElement;
}
export interface BqIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqIconElement;
}
export interface BqNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqNotificationElement;
}
export interface BqRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqRadioElement;
}
export interface BqRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqRadioGroupElement;
}
export interface BqSideMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqSideMenuElement;
}
export interface BqSideMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqSideMenuItemElement;
}
export interface BqSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqSliderElement;
}
export interface BqSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqSwitchElement;
}
export interface BqTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqTabElement;
}
export interface BqTabGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBqTabGroupElement;
}
declare global {
    /**
     * An avatar represents an object made of different pieces of information, in a way that is understandable at a glance.
     */
    interface HTMLBqAvatarElement extends Components.BqAvatar, HTMLStencilElement {
    }
    var HTMLBqAvatarElement: {
        prototype: HTMLBqAvatarElement;
        new (): HTMLBqAvatarElement;
    };
    interface HTMLBqBadgeElement extends Components.BqBadge, HTMLStencilElement {
    }
    var HTMLBqBadgeElement: {
        prototype: HTMLBqBadgeElement;
        new (): HTMLBqBadgeElement;
    };
    /**
     * Buttons are designed for users to take action on a page or a screen.
     */
    interface HTMLBqButtonElement extends Components.BqButton, HTMLStencilElement {
    }
    var HTMLBqButtonElement: {
        prototype: HTMLBqButtonElement;
        new (): HTMLBqButtonElement;
    };
    interface HTMLBqCheckboxElement extends Components.BqCheckbox, HTMLStencilElement {
    }
    var HTMLBqCheckboxElement: {
        prototype: HTMLBqCheckboxElement;
        new (): HTMLBqCheckboxElement;
    };
    interface HTMLBqDialogElement extends Components.BqDialog, HTMLStencilElement {
    }
    var HTMLBqDialogElement: {
        prototype: HTMLBqDialogElement;
        new (): HTMLBqDialogElement;
    };
    interface HTMLBqDividerElement extends Components.BqDivider, HTMLStencilElement {
    }
    var HTMLBqDividerElement: {
        prototype: HTMLBqDividerElement;
        new (): HTMLBqDividerElement;
    };
    /**
     * Icons are simplified images that graphically explain the meaning of an object on the screen.
     */
    interface HTMLBqIconElement extends Components.BqIcon, HTMLStencilElement {
    }
    var HTMLBqIconElement: {
        prototype: HTMLBqIconElement;
        new (): HTMLBqIconElement;
    };
    interface HTMLBqNotificationElement extends Components.BqNotification, HTMLStencilElement {
    }
    var HTMLBqNotificationElement: {
        prototype: HTMLBqNotificationElement;
        new (): HTMLBqNotificationElement;
    };
    interface HTMLBqRadioElement extends Components.BqRadio, HTMLStencilElement {
    }
    var HTMLBqRadioElement: {
        prototype: HTMLBqRadioElement;
        new (): HTMLBqRadioElement;
    };
    interface HTMLBqRadioGroupElement extends Components.BqRadioGroup, HTMLStencilElement {
    }
    var HTMLBqRadioGroupElement: {
        prototype: HTMLBqRadioGroupElement;
        new (): HTMLBqRadioGroupElement;
    };
    interface HTMLBqSideMenuElement extends Components.BqSideMenu, HTMLStencilElement {
    }
    var HTMLBqSideMenuElement: {
        prototype: HTMLBqSideMenuElement;
        new (): HTMLBqSideMenuElement;
    };
    interface HTMLBqSideMenuItemElement extends Components.BqSideMenuItem, HTMLStencilElement {
    }
    var HTMLBqSideMenuItemElement: {
        prototype: HTMLBqSideMenuItemElement;
        new (): HTMLBqSideMenuItemElement;
    };
    interface HTMLBqSliderElement extends Components.BqSlider, HTMLStencilElement {
    }
    var HTMLBqSliderElement: {
        prototype: HTMLBqSliderElement;
        new (): HTMLBqSliderElement;
    };
    /**
     * Spinners are designed for users to display data loading.
     */
    interface HTMLBqSpinnerElement extends Components.BqSpinner, HTMLStencilElement {
    }
    var HTMLBqSpinnerElement: {
        prototype: HTMLBqSpinnerElement;
        new (): HTMLBqSpinnerElement;
    };
    interface HTMLBqStatusElement extends Components.BqStatus, HTMLStencilElement {
    }
    var HTMLBqStatusElement: {
        prototype: HTMLBqStatusElement;
        new (): HTMLBqStatusElement;
    };
    /**
     * Toggle switches are digital on/off switches.
     * They should provide immediate results, giving users the freedom to control their preferences as needed.
     */
    interface HTMLBqSwitchElement extends Components.BqSwitch, HTMLStencilElement {
    }
    var HTMLBqSwitchElement: {
        prototype: HTMLBqSwitchElement;
        new (): HTMLBqSwitchElement;
    };
    interface HTMLBqTabElement extends Components.BqTab, HTMLStencilElement {
    }
    var HTMLBqTabElement: {
        prototype: HTMLBqTabElement;
        new (): HTMLBqTabElement;
    };
    interface HTMLBqTabGroupElement extends Components.BqTabGroup, HTMLStencilElement {
    }
    var HTMLBqTabGroupElement: {
        prototype: HTMLBqTabGroupElement;
        new (): HTMLBqTabGroupElement;
    };
    interface HTMLBqTooltipElement extends Components.BqTooltip, HTMLStencilElement {
    }
    var HTMLBqTooltipElement: {
        prototype: HTMLBqTooltipElement;
        new (): HTMLBqTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "bq-avatar": HTMLBqAvatarElement;
        "bq-badge": HTMLBqBadgeElement;
        "bq-button": HTMLBqButtonElement;
        "bq-checkbox": HTMLBqCheckboxElement;
        "bq-dialog": HTMLBqDialogElement;
        "bq-divider": HTMLBqDividerElement;
        "bq-icon": HTMLBqIconElement;
        "bq-notification": HTMLBqNotificationElement;
        "bq-radio": HTMLBqRadioElement;
        "bq-radio-group": HTMLBqRadioGroupElement;
        "bq-side-menu": HTMLBqSideMenuElement;
        "bq-side-menu-item": HTMLBqSideMenuItemElement;
        "bq-slider": HTMLBqSliderElement;
        "bq-spinner": HTMLBqSpinnerElement;
        "bq-status": HTMLBqStatusElement;
        "bq-switch": HTMLBqSwitchElement;
        "bq-tab": HTMLBqTabElement;
        "bq-tab-group": HTMLBqTabGroupElement;
        "bq-tooltip": HTMLBqTooltipElement;
    }
}
declare namespace LocalJSX {
    /**
     * An avatar represents an object made of different pieces of information, in a way that is understandable at a glance.
     */
    interface BqAvatar {
        /**
          * Alternate text for the avatar image if the image cannot be displayed
         */
        "altText"?: string;
        /**
          * The image source to load on the avatar (this can be also a base64 encoded image)
         */
        "image"?: string;
        /**
          * The text to display on avatar
         */
        "initials"?: string;
        /**
          * A text to use for describing the avatar on assistive devices
         */
        "label"?: string;
        /**
          * The shape of the avatar
         */
        "shape"?: TAvatarShape;
        /**
          * The size of the avatar
         */
        "size"?: TAvatarSize;
    }
    interface BqBadge {
        /**
          * Badge background color. The value should be a valid value of the palette color
         */
        "backgroundColor"?: string;
        /**
          * The size of the badge
         */
        "size"?: TBadgeSize;
        /**
          * Badge number color. The value should be a valid value of the palette color
         */
        "textColor"?: string;
    }
    /**
     * Buttons are designed for users to take action on a page or a screen.
     */
    interface BqButton {
        /**
          * The appearance style to apply to the button
         */
        "appearance"?: TButtonAppearance;
        /**
          * If `true`, it will make the button fit to its parent width.
         */
        "block"?: boolean;
        /**
          * If true, the button will be disabled (no interaction allowed)
         */
        "disabled"?: boolean;
        /**
          * Tells the browser to treat the linked URL as a download. Only used when `href` is set. Details: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download
         */
        "download"?: string;
        /**
          * When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`
         */
        "href"?: string;
        /**
          * It determinate how the content should be aligned
         */
        "justifyContent"?: 'left' | 'center' | 'right';
        /**
          * If `true` it will display the button in a loading state
         */
        "loading"?: boolean;
        /**
          * Handler to be called when the button loses focus
         */
        "onBqBlur"?: (event: BqButtonCustomEvent<HTMLBqButtonElement>) => void;
        /**
          * Handler to be called when button gets focus
         */
        "onBqClick"?: (event: BqButtonCustomEvent<HTMLBqButtonElement>) => void;
        /**
          * Handler to be called when the button is clicked
         */
        "onBqFocus"?: (event: BqButtonCustomEvent<HTMLBqButtonElement>) => void;
        /**
          * The size of the button
         */
        "size"?: TButtonSize;
        /**
          * Where to display the linked URL, as the name for a browsing context (a `tab`, `window`, or `<iframe>`) Details: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target
         */
        "target"?: '_blank' | '_parent' | '_self' | '_top';
        /**
          * The default behavior of the button
         */
        "type"?: TButtonType;
        /**
          * The variant of button to apply on top of the appearance (applicable only to `appearance="primary"`)
         */
        "variant"?: TButtonVariant;
    }
    interface BqCheckbox {
        /**
          * If true checkbox displays background on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * If true checkbox is checked
         */
        "checked"?: boolean;
        /**
          * If true checkbox is disabled
         */
        "disabled"?: boolean;
        /**
          * The form ID that the checkbox is associated with
         */
        "formId"?: string;
        /**
          * A state that is neither checked nor unchecked
         */
        "indeterminate"?: false;
        /**
          * Name of the HTML input form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * Handler to be called when the checkbox loses focus
         */
        "onBqBlur"?: (event: BqCheckboxCustomEvent<HTMLBqCheckboxElement>) => void;
        /**
          * Handler to be called when the chebkbox state changes
         */
        "onBqChange"?: (event: BqCheckboxCustomEvent<{ checked: boolean }>) => void;
        /**
          * Handler to be called when the checkbox gets focus
         */
        "onBqFocus"?: (event: BqCheckboxCustomEvent<HTMLBqCheckboxElement>) => void;
        /**
          * If `true`, it will indicate that the user must specify a value for the checkbox before the owning form can be submitted
         */
        "required"?: boolean;
        /**
          * A string representing the value of the checkbox. Primarily used to differentiate a list of related checkboxes that have the same name.
         */
        "value": string;
    }
    interface BqDialog {
        /**
          * If true will not close on outside click
         */
        "disableOutsideClickClose"?: boolean;
        /**
          * The appearance of footer
         */
        "footerApperance"?: TDialogFooterAppearance;
        /**
          * If true it hides close button
         */
        "hideCloseButton"?: boolean;
        /**
          * The size of the dialog
         */
        "size"?: TDialogSize;
    }
    interface BqDivider {
        /**
          * If true, the divider has a dashed pattern
         */
        "dashed"?: boolean;
        /**
          * The default orientation of the divider
         */
        "orientation"?: TDividerOrientation;
        /**
          * Set the min width of the divider's stroke when text is not centered. Value expressed in px
         */
        "strokeBasis"?: number;
        /**
          * Set the stroke color of the divider. The value should be a valid value of the palette color
         */
        "strokeColor"?: string;
        /**
          * Set the gap of the divider's stroke. This is applicable when the stroke is dashed
         */
        "strokeDashGap"?: number;
        /**
          * Set the width of each dash of the divider's stroke. This is applicable when the stroke is dashed
         */
        "strokeDashWidth"?: number;
        /**
          * Set the lineap of the divider's stroke. This is applicable when the stroke is dashed
         */
        "strokeLinecap"?: TDividerStrokeLinecap;
        /**
          * Set the thickness of the divider's stroke. Value expressed in px
         */
        "strokeThickness"?: number;
        /**
          * Set the alignment of the title on the main axis of the divider (horizontal / vertical)
         */
        "titleAlignment"?: TDividerTitleAlignment;
    }
    /**
     * Icons are simplified images that graphically explain the meaning of an object on the screen.
     */
    interface BqIcon {
        /**
          * Set the stroke color of the SVG. The value should be a valid value of the palette color
         */
        "color"?: string;
        /**
          * Icon name to load. Please check all available icons [here](https://phosphoricons.com/)
         */
        "name": string;
        /**
          * Callback handler to be called when the SVG has loaded
         */
        "onSvgLoaded"?: (event: BqIconCustomEvent<any>) => void;
        /**
          * Set the size of the SVG
         */
        "size"?: string | number;
        /**
          * It set the icon weight/style
         */
        "weight"?: TIconWeight;
    }
    interface BqNotification {
        /**
          * If true, the notification will automatically hide after the specified amount of time
         */
        "autoDismiss"?: boolean;
        /**
          * If true, the close button at the top right of the notification won't be shown
         */
        "disableClose"?: boolean;
        /**
          * If true, the predefined icon type won't be shown and a custom icon provided on integration will be displayed instead
         */
        "hasCustomIcon"?: boolean;
        /**
          * If true, the notification icon won't be shown
         */
        "hideIcon"?: boolean;
        /**
          * If true, the notification will be shown
         */
        "isOpen"?: boolean;
        /**
          * Callback handler to be called when the notification is hidden
         */
        "onBqHide"?: (event: BqNotificationCustomEvent<any>) => void;
        /**
          * Callback handler to be called when the notification is shown
         */
        "onBqShow"?: (event: BqNotificationCustomEvent<any>) => void;
        /**
          * The length of time, in milliseconds, after which the notification will close itself. Only valid if `autoDismiss="true"`
         */
        "time"?: number;
        /**
          * Type of Notification
         */
        "type"?: TNotificationType;
    }
    interface BqRadio {
        /**
          * If true radio displays background on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * If true radio input is checked
         */
        "checked"?: boolean;
        /**
          * If true radio input is disabled
         */
        "disabled"?: boolean;
        /**
          * The form ID that the radio input is associated with
         */
        "formId"?: string;
        /**
          * Name of the HTML input form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * Handler to be called when the radio loses focus
         */
        "onBqBlur"?: (event: BqRadioCustomEvent<HTMLBqRadioElement>) => void;
        /**
          * Handler to be called when the radio state changes
         */
        "onBqClick"?: (event: BqRadioCustomEvent<HTMLBqRadioElement>) => void;
        /**
          * Handler to be called when the radio gets focus
         */
        "onBqFocus"?: (event: BqRadioCustomEvent<HTMLBqRadioElement>) => void;
        /**
          * Handler to be called when the radio key is pressed
         */
        "onBqKeyDown"?: (event: BqRadioCustomEvent<KeyboardEvent>) => void;
        /**
          * If `true`, it will indicate that the user must specify a value for the radio before the owning form can be submitted
         */
        "required"?: boolean;
        /**
          * A string representing the value of the radio.
         */
        "value": string;
    }
    interface BqRadioGroup {
        /**
          * If true, all radio inputs in the group will display a background on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * A number representing the delay time (in milliseconds) that `bqChange` event handler gets triggered once the value change
         */
        "debounceTime"?: number;
        /**
          * If true radio inputs are disabled
         */
        "disabled"?: boolean;
        /**
          * If true displays fieldset
         */
        "fieldset"?: boolean;
        /**
          * Name of the HTML input form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * Handler to be called when the radio state changes
         */
        "onBqChange"?: (event: BqRadioGroupCustomEvent<{ value: string; target: HTMLBqRadioElement }>) => void;
        /**
          * The display orientation of the radio inputs
         */
        "orientation"?: TRadioGroupOrientation;
        /**
          * A string representing the value of the radio.
         */
        "value"?: string;
    }
    interface BqSideMenu {
        /**
          * It sets a predefined appearance of the side menu
         */
        "appearance"?: TSideMenuAppearance;
        /**
          * If true, the container will reduce its width
         */
        "collapse"?: boolean;
        /**
          * Callback handler to be called when the Side menu changes its width from expanded to collapse and vice versa
         */
        "onBqCollapse"?: (event: BqSideMenuCustomEvent<{ collapse: boolean }>) => void;
        /**
          * Callback handler to be called when the active/selected menu item changes
         */
        "onBqSelect"?: (event: BqSideMenuCustomEvent<HTMLBqSideMenuItemElement>) => void;
        /**
          * It sets the size of the navigation menu items
         */
        "size"?: TSideMenuSize;
    }
    interface BqSideMenuItem {
        /**
          * If true, the menu item will be shown as active/selected.
         */
        "active"?: boolean;
        /**
          * If true, the item label and suffix will be hidden and the with will be reduce according to its parent
         */
        "collapse"?: boolean;
        /**
          * If true, the menu item will be disabled (no interaction allowed)
         */
        "disabled"?: boolean;
        /**
          * Handler to be called when the button loses focus
         */
        "onBqBlur"?: (event: BqSideMenuItemCustomEvent<HTMLBqSideMenuItemElement>) => void;
        /**
          * Handler to be called when button gets focus
         */
        "onBqClick"?: (event: BqSideMenuItemCustomEvent<HTMLBqSideMenuItemElement>) => void;
        /**
          * Handler to be called when the button is clicked
         */
        "onBqFocus"?: (event: BqSideMenuItemCustomEvent<HTMLBqSideMenuItemElement>) => void;
    }
    interface BqSlider {
        /**
          * A number representing the delay value applied to bqChange event handler
         */
        "debounceTime"?: number;
        /**
          * If `true` slider is disabled
         */
        "disabled"?: boolean;
        /**
          * A number representing the minimum value between the min and max range selected.
         */
        "gap"?: number;
        /**
          * A number representing the max value of the slider.
         */
        "max"?: number;
        /**
          * A number representing the min value of the slider.
         */
        "min"?: number;
        /**
          * Handler to be called when the slider loses focus
         */
        "onBqBlur"?: (event: BqSliderCustomEvent<HTMLBqSliderElement>) => void;
        /**
          * Handler to be called when change the value on range inputs
         */
        "onBqChange"?: (event: BqSliderCustomEvent<{ value: number | Array<number> | string; el: HTMLBqSliderElement }>) => void;
        /**
          * Handler to be called when the slider gets focused
         */
        "onBqFocus"?: (event: BqSliderCustomEvent<HTMLBqSliderElement>) => void;
        /**
          * A number representing the step of the slider.
         */
        "step"?: number;
        /**
          * It defines the type of slider to display
         */
        "type"?: TSliderType;
        /**
          * A number representing the value of the slider.
         */
        "value"?: number | Array<number> | string;
        /**
          * If `true` it will display the min and max values
         */
        "valueIndicator"?: boolean;
    }
    /**
     * Spinners are designed for users to display data loading.
     */
    interface BqSpinner {
        /**
          * If `false`, the animation on the icon element will be stopped
         */
        "animation"?: boolean;
        /**
          * It defines the size of the icon element displayed
         */
        "size"?: TSpinnerSize;
        /**
          * It defines the position of the label text
         */
        "textPosition"?: TSpinnerTextPosition;
    }
    interface BqStatus {
        /**
          * It defines the type of status to display
         */
        "type"?: TStatusType;
    }
    /**
     * Toggle switches are digital on/off switches.
     * They should provide immediate results, giving users the freedom to control their preferences as needed.
     */
    interface BqSwitch {
        /**
          * If true, a background will be displayed on hover
         */
        "backgroundOnHover"?: boolean;
        /**
          * It indicates whether if the switch is `ON` by default (when the page loads)
         */
        "checked"?: boolean;
        /**
          * If true, the switch control will be disabled and no interaction will be allowed
         */
        "disabled"?: boolean;
        /**
          * If true, the component will take the full width space available on the parent container
         */
        "fullWidth"?: boolean;
        /**
          * It indicates how to to display the on/off marks inside the control, with icons or none (default)
         */
        "innerLabel"?: TSwitchInnerLabel;
        /**
          * It defines how to distribute the space between and around the control and the label text (https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)
         */
        "justifyContent"?: TSwitchJustifyContent;
        /**
          * Name of the form control. Submitted with the form as part of a name/value pair
         */
        "name": string;
        /**
          * Handler to be called when the switch loses focus
         */
        "onBqBlur"?: (event: BqSwitchCustomEvent<HTMLBqSwitchElement>) => void;
        /**
          * Handler to be called when the switch state changes
         */
        "onBqChange"?: (event: BqSwitchCustomEvent<{ checked: boolean }>) => void;
        /**
          * Handler to be called when the switch gets focus
         */
        "onBqFocus"?: (event: BqSwitchCustomEvent<HTMLBqSwitchElement>) => void;
        /**
          * If `true`, it will indicate that the user must switch `ON` the element before the owning form can be submitted
         */
        "required"?: boolean;
        /**
          * If true, the order of the control and the label text will be changed
         */
        "reverseOrder"?: boolean;
        /**
          * The input control's value, submitted as a name/value pair with form data.
         */
        "value"?: string;
    }
    interface BqTab {
        /**
          * If true tab is active
         */
        "active"?: boolean;
        /**
          * The tab panel id that the tab controls
         */
        "controls": string;
        /**
          * If true tab is disabled
         */
        "disabled"?: boolean;
        /**
          * Handler to be called when the tab loses focus
         */
        "onBqBlur"?: (event: BqTabCustomEvent<HTMLBqTabElement>) => void;
        /**
          * Handler to be called when the tab state changes
         */
        "onBqClick"?: (event: BqTabCustomEvent<HTMLBqTabElement>) => void;
        /**
          * Handler to be called when the tab gets focus
         */
        "onBqFocus"?: (event: BqTabCustomEvent<HTMLBqTabElement>) => void;
        /**
          * Handler to be called when the tab key is pressed
         */
        "onBqKeyDown"?: (event: BqTabCustomEvent<KeyboardEvent>) => void;
        /**
          * The size of the tab
         */
        "size"?: TTabSize;
        /**
          * The id of the tab
         */
        "tabId": string;
    }
    interface BqTabGroup {
        /**
          * A number representing the delay value applied to bqChange event handler
         */
        "debounceTime"?: number;
        /**
          * If true, the underline divider below the tabs won't be shown
         */
        "disableDivider"?: boolean;
        /**
          * Handler to be called when the tab value changes
         */
        "onBqChange"?: (event: BqTabGroupCustomEvent<{ target: HTMLBqTabElement; value: string }>) => void;
        /**
          * The size of the tab
         */
        "size"?: TTabSize;
        /**
          * A string representing the id of the selected tab.
         */
        "value"?: string;
    }
    interface BqTooltip {
        /**
          * Set the action when the tooltip should be displayed, on hover (default) or click
         */
        "displayOn"?: 'click' | 'hover';
        /**
          * Distance between trigger element and tooltip
         */
        "distance"?: number;
        /**
          * If true, the arrow on the tooltip content won't be shown
         */
        "hideArrow"?: boolean;
        "placement"?: FloatingUIPlacement;
        /**
          * Whether the tooltip should have the same width as the trigger element (applicable only for content shorter than the trigger element)
         */
        "sameWidth"?: boolean;
        /**
          * Indicates whether or not the tooltip is visible
         */
        "visible"?: boolean;
    }
    interface IntrinsicElements {
        "bq-avatar": BqAvatar;
        "bq-badge": BqBadge;
        "bq-button": BqButton;
        "bq-checkbox": BqCheckbox;
        "bq-dialog": BqDialog;
        "bq-divider": BqDivider;
        "bq-icon": BqIcon;
        "bq-notification": BqNotification;
        "bq-radio": BqRadio;
        "bq-radio-group": BqRadioGroup;
        "bq-side-menu": BqSideMenu;
        "bq-side-menu-item": BqSideMenuItem;
        "bq-slider": BqSlider;
        "bq-spinner": BqSpinner;
        "bq-status": BqStatus;
        "bq-switch": BqSwitch;
        "bq-tab": BqTab;
        "bq-tab-group": BqTabGroup;
        "bq-tooltip": BqTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * An avatar represents an object made of different pieces of information, in a way that is understandable at a glance.
             */
            "bq-avatar": LocalJSX.BqAvatar & JSXBase.HTMLAttributes<HTMLBqAvatarElement>;
            "bq-badge": LocalJSX.BqBadge & JSXBase.HTMLAttributes<HTMLBqBadgeElement>;
            /**
             * Buttons are designed for users to take action on a page or a screen.
             */
            "bq-button": LocalJSX.BqButton & JSXBase.HTMLAttributes<HTMLBqButtonElement>;
            "bq-checkbox": LocalJSX.BqCheckbox & JSXBase.HTMLAttributes<HTMLBqCheckboxElement>;
            "bq-dialog": LocalJSX.BqDialog & JSXBase.HTMLAttributes<HTMLBqDialogElement>;
            "bq-divider": LocalJSX.BqDivider & JSXBase.HTMLAttributes<HTMLBqDividerElement>;
            /**
             * Icons are simplified images that graphically explain the meaning of an object on the screen.
             */
            "bq-icon": LocalJSX.BqIcon & JSXBase.HTMLAttributes<HTMLBqIconElement>;
            "bq-notification": LocalJSX.BqNotification & JSXBase.HTMLAttributes<HTMLBqNotificationElement>;
            "bq-radio": LocalJSX.BqRadio & JSXBase.HTMLAttributes<HTMLBqRadioElement>;
            "bq-radio-group": LocalJSX.BqRadioGroup & JSXBase.HTMLAttributes<HTMLBqRadioGroupElement>;
            "bq-side-menu": LocalJSX.BqSideMenu & JSXBase.HTMLAttributes<HTMLBqSideMenuElement>;
            "bq-side-menu-item": LocalJSX.BqSideMenuItem & JSXBase.HTMLAttributes<HTMLBqSideMenuItemElement>;
            "bq-slider": LocalJSX.BqSlider & JSXBase.HTMLAttributes<HTMLBqSliderElement>;
            /**
             * Spinners are designed for users to display data loading.
             */
            "bq-spinner": LocalJSX.BqSpinner & JSXBase.HTMLAttributes<HTMLBqSpinnerElement>;
            "bq-status": LocalJSX.BqStatus & JSXBase.HTMLAttributes<HTMLBqStatusElement>;
            /**
             * Toggle switches are digital on/off switches.
             * They should provide immediate results, giving users the freedom to control their preferences as needed.
             */
            "bq-switch": LocalJSX.BqSwitch & JSXBase.HTMLAttributes<HTMLBqSwitchElement>;
            "bq-tab": LocalJSX.BqTab & JSXBase.HTMLAttributes<HTMLBqTabElement>;
            "bq-tab-group": LocalJSX.BqTabGroup & JSXBase.HTMLAttributes<HTMLBqTabGroupElement>;
            "bq-tooltip": LocalJSX.BqTooltip & JSXBase.HTMLAttributes<HTMLBqTooltipElement>;
        }
    }
}
