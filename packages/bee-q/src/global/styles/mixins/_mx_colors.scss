/* -------------------------------------------------------------------------- */
/*                            SCSS Color utilities                            */
/* -------------------------------------------------------------------------- */
@use 'sass:color';
@use 'sass:math';

/**
 * Set the corresponding color palette and its HSL values
 */
@mixin set-colors($colors) {
  @each $color, $value in $colors {
    #{$color}: #{$value};
    #{$color}-h: #{to-fixed(hue($value))};
    #{$color}-s: #{to-fixed(saturation($value))};
    #{$color}-l: #{to-fixed(lightness($value))};
  }
}

/**
 * Overrides base SASS native 'lighten' function
 * 
 * - for CSS Custom Properties [lighten(var(--token), 40%)] use hsl and token components
 *   to print the result: hsl(var(--token-h), var(--token-s), calc(var(--token-l) * 40%))
 */
@function lighten($color, $amount) {
  @if (str-index('#{$color}', 'var(')) {
    @if (unitless($amount) ==false) {
      $amount: math.div($amount, 100%);
    }
    $hsl: get-hsl($color);
    @return hsl(map-get($hsl, h), map-get($hsl, s), calc(#{map-get($hsl, l)} * #{1 + $amount}));
  }
  @return color.scale($color, $lightness: $amount);
}

/**
 * Overrides base SASS native 'darken' function
 *
 * - for CSS Custom Properties [darken(var(--token),40%)] use hsl and token components
 * to print the result: hsl(var(--token-h),var(--token-s), calc(var(--token-l) * -40%))
 */
@function darken($color, $amount) {
  @return lighten($color, -$amount);
}

/**
 * Util function to get HSL color tokens
 */
@function get-hsl($color) {
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  @return (h: var(#{$color + '-h'}), s: var(#{$color + '-s'}), l: var(#{$color + '-l'}));
}

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@function to-fixed($float) {
  $pow: 100;
  @return math.div(round($float * $pow), $pow);
}
