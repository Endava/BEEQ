diff --git a/src/executors/serve/executor.d.ts b/src/executors/serve/executor.d.ts
index 785841d7a9cee9eca9699b123bdd6f8539e23966..6c49ba084ecc83da53c1e38c46189798f1ef29b6 100644
--- a/src/executors/serve/executor.d.ts
+++ b/src/executors/serve/executor.d.ts
@@ -1,8 +1,6 @@
 import { StencilServeOptions } from './schema';
 import { ExecutorContext } from '@nx/devkit';
-export default function runExecutor(options: StencilServeOptions, context: ExecutorContext): AsyncGenerator<{
-    success: boolean;
-}, {
+export default function runExecutor(options: StencilServeOptions, context: ExecutorContext): AsyncGenerator<never, {
     success: boolean;
     error?: undefined;
 } | {
diff --git a/src/executors/serve/executor.js b/src/executors/serve/executor.js
index 372793056e356b30a25c8cc34fd21b7ecf6b1339..5740dbba18b50d39f51c2c27a8d2e625f1a5cea6 100644
--- a/src/executors/serve/executor.js
+++ b/src/executors/serve/executor.js
@@ -33,9 +33,6 @@ function runExecutor(options, context) {
         const taskCommand = 'build';
         const projGraph = yield tslib_1.__await((0, project_graph_1.createProjectGraphAsync)());
         const { target, dependencies } = (0, buildable_libs_utils_1.calculateProjectDependencies)(projGraph, context.root, context.projectName, context.targetName, context.configurationName);
-        if (!(0, buildable_libs_utils_1.checkDependentProjectsHaveBeenBuilt)(context.root, context.projectName, context.targetName, dependencies)) {
-            yield yield tslib_1.__await({ success: false });
-        }
         const flags = createStencilCompilerOptions(taskCommand, options);
         const { strictConfig, pathCollection } = yield tslib_1.__await((0, stencil_runtime_1.initializeStencilConfig)(taskCommand, options, context, flags));
         const config = yield tslib_1.__await((0, stencil_runtime_1.prepareConfigAndOutputargetPaths)(strictConfig, pathCollection));
diff --git a/src/executors/stencil-runtime/prepare-config-and-outputarget-paths.js b/src/executors/stencil-runtime/prepare-config-and-outputarget-paths.js
index f524f0381c45121eaf0f362ab8f7fcd08367e156..f0bbe77eede3ea0d5cce55e0c26893b6bd2df720 100644
--- a/src/executors/stencil-runtime/prepare-config-and-outputarget-paths.js
+++ b/src/executors/stencil-runtime/prepare-config-and-outputarget-paths.js
@@ -55,6 +55,7 @@ function prepareDistDirAndPkgJson(pathCollection) {
 }
 function prepareConfigAndOutputargetPaths(config, pathCollection) {
     return tslib_1.__awaiter(this, void 0, void 0, function* () {
+        var _a, _b, _c, _d, _e;
         prepareDistDirAndPkgJson(pathCollection);
         if (config.flags.e2e) {
             (0, e2e_testing_1.prepareE2eTesting)(pathCollection);
@@ -79,15 +80,17 @@ function prepareConfigAndOutputargetPaths(config, pathCollection) {
             'componentDts',
         ];
         const outputTargets = calculateOutputTargetPathVariables(config, pathCollection, pathVariables);
-        const devServerConfig = Object.assign(config.devServer, {
-            root: config.devServer.root.replace(pathCollection.projectRoot, pathCollection.distDir),
-            openBrowser: config.flags.open,
-        });
-        if (!config.flags.e2e) {
-            config.packageJsonFilePath = config.packageJsonFilePath.replace(pathCollection.projectRoot, pathCollection.distDir);
+        const devServerConfig = config.devServer
+            ? Object.assign(config.devServer, {
+                root: (_a = config.devServer.root) === null || _a === void 0 ? void 0 : _a.replace(pathCollection.projectRoot, pathCollection.distDir),
+                openBrowser: (_b = config.flags) === null || _b === void 0 ? void 0 : _b.open,
+            })
+            : undefined;
+        if (!((_c = config.flags) === null || _c === void 0 ? void 0 : _c.e2e)) {
+            config.packageJsonFilePath = (_d = config.packageJsonFilePath) === null || _d === void 0 ? void 0 : _d.replace(pathCollection.projectRoot, pathCollection.distDir);
         }
         else {
-            config.packageJsonFilePath = config.packageJsonFilePath.replace('package.json', 'package.e2e.json');
+            config.packageJsonFilePath = (_e = config.packageJsonFilePath) === null || _e === void 0 ? void 0 : _e.replace('package.json', 'package.e2e.json');
         }
         return Object.assign(Object.assign({}, config), { outputTargets: outputTargets, devServer: devServerConfig });
     });
diff --git a/src/executors/stencil-runtime/stencil-config.js b/src/executors/stencil-runtime/stencil-config.js
index 4e17cca33f8480d1c7a5d0f93fe3fb1c4b58db49..3a61c31bf7810121dd63ecd389fd80560f8cfc45 100644
--- a/src/executors/stencil-runtime/stencil-config.js
+++ b/src/executors/stencil-runtime/stencil-config.js
@@ -38,7 +38,7 @@ function initializeStencilConfig(taskCommand, options, context, flags) {
             sys,
         });
         const loadedConfig = loadConfigResults.config;
-        const strictConfig = Object.assign(Object.assign({}, loadedConfig), { flags: flags, logger, outputTargets: (_a = loadedConfig.outputTargets) !== null && _a !== void 0 ? _a : [], rootDir: (_b = loadedConfig.rootDir) !== null && _b !== void 0 ? _b : '/', sys: sys !== null && sys !== void 0 ? sys : loadedConfig.sys, testing: (_c = loadedConfig.testing) !== null && _c !== void 0 ? _c : {} });
+        const strictConfig = Object.assign(Object.assign({}, loadedConfig), { flags: flags, logger, outputTargets: (_a = loadedConfig === null || loadedConfig === void 0 ? void 0 : loadedConfig.outputTargets) !== null && _a !== void 0 ? _a : [], rootDir: (_b = loadedConfig === null || loadedConfig === void 0 ? void 0 : loadedConfig.rootDir) !== null && _b !== void 0 ? _b : '/', sys: sys !== null && sys !== void 0 ? sys : loadedConfig === null || loadedConfig === void 0 ? void 0 : loadedConfig.sys, testing: (_c = loadedConfig === null || loadedConfig === void 0 ? void 0 : loadedConfig.testing) !== null && _c !== void 0 ? _c : {} });
         if (strictConfig.flags.task === 'build') {
             strictConfig.rootDir = distDir;
             strictConfig.packageJsonFilePath = (0, normalize_path_1.normalizePath)((0, path_1.join)(distDir, 'package.json'));
diff --git a/src/executors/test/executor.js b/src/executors/test/executor.js
index d784a66f88968264bf31e19beedb48f659de31dd..6a53c5ed83ce2b7f2b03848a3a9bf241a79181e6 100644
--- a/src/executors/test/executor.js
+++ b/src/executors/test/executor.js
@@ -16,12 +16,6 @@ function createStencilCompilerOptions(taskCommand, options) {
 function runExecutor(options, context) {
     return tslib_1.__awaiter(this, void 0, void 0, function* () {
         const taskCommand = 'test';
-        devkit_1.logger.info(`
-  ###
-  ### You have to downgrade the Jest packages to Jest 27. We won't do this automatically cause it could break other Nx projects.
-  ### Stencil itself supports just Jest 27, Nx uses Jest 28 by default. Downgrade with caution!
-  ###
-  `);
         const flags = createStencilCompilerOptions(taskCommand, options);
         const { strictConfig, pathCollection } = yield (0, stencil_runtime_1.initializeStencilConfig)(taskCommand, options, context, flags);
         const stencilConfig = yield (0, stencil_runtime_1.prepareConfigAndOutputargetPaths)(strictConfig, pathCollection);
